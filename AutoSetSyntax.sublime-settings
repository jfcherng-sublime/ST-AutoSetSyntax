{
    //////////////////////////////////////////////////////////
    // Online Document                                      //
    // https://jfcherng-sublime.github.io/ST-AutoSetSyntax/ //
    //////////////////////////////////////////////////////////

    ///////////////////
    // User Settings //
    ///////////////////

    // The time (in secondes) to wait for the next event to be triggered.
    "debounce": 0.3,
    // Enable plugin log (in a dedicated panel)
    "enable_log": true,
    // Set default syntax for build outputs.
    // Can be one of following formats:
    //   - Syntax top scope: "scope:text.html.markdown"
    //   - Partial/full syntax file path: "Markdown/Markdown."
    //   - The name of the syntax: "Markdown" (which is shown in the bottom-right corner of ST)
    //   - An empty string, which does nothing
    "exec_file_syntax": "Packages/AutoSetSyntax/syntaxes/ExecOutput.sublime-syntax",
    // Set default syntax for new files. You can use multiple formats as described above.
    "new_file_syntax": "",
    // Run "auto_set_syntax" command on views which exist before the plugin is loaded?
    "run_on_startup_views": false,
    // The max lookup size for the file.
    // A negative number means no limit, which may have performance issue on large files.
    "trim_file_size": 20000, // about 20KB
    // The max lookup length for the first line.
    // A negative number means no limit, which may have performance issue on a long first line.
    "trim_first_line_length": 500,
    // Apart from "trim_suffixes", also try to remove every sub-extensions when finding a syntax match.
    "trim_suffixes_auto": false,
    // Syntax rules that will be checked one by one.
    // This plugin will assign the syntax in the first satisfied rule to the view.
    // You may want to see "default_syntax_rules" for some examples.
    "user_syntax_rules": [],
    // Suffixes that will be used to right trim the filename.
    // By doing that, the file may be then auto set syntax with a trimmed filename.
    "user_trim_suffixes": [],

    //////////////////////
    // Project Settings //
    ////////////////////////////////////////////////////////////////////////////
    // You shouldn't change these settings here but in your project settings. //
    ////////////////////////////////////////////////////////////////////////////

    // Syntax rules that will be checked one by one.
    // This plugin will assign the syntax in the first satisfied rule to the view.
    // You may want to see "default_syntax_rules" for some examples.
    "project_syntax_rules": [],
    // Suffixes that will be used to right trim the filename.
    // By doing that, the file may be then auto set syntax with a trimmed filename.
    "project_trim_suffixes": [],

    //////////////////////
    // Default Settings //
    ////////////////////////////////////////////////////////////////////////////
    // If you override default rules, they will not be updated in the future. //
    // If you want to add new rules, add them in user settings.               //
    ////////////////////////////////////////////////////////////////////////////

    // Syntax rules that will be checked one by one.
    // This plugin will assign the syntax in the first satisfied rule to the view.
    "default_syntax_rules": [
        // syntax rule
        {
            "syntaxes": "scope:source.python",
            "selector": "text.plain",
            // match rule
            "match": "all", // "any" by default
            "rules": [
                // constraint rule
                {
                    "constraint": "contains_regex",
                    "args": ["^(?:def|class)\\s"]
                },
                {
                    "constraint": "contains_regex",
                    "args": ["^import(?!\\s+groovy)(?:$|[\\s(])", "^from\\s+[a-zA-Z.]+\\s+import(?:$|[\\s(])"]
                }
            ]
        },
        {
            "comment": "Basic INI files",
            "syntaxes": "scope:source.ini",
            "selector": "text.plain",
            "rules": [
                {
                    "constraint": "is_name",
                    "args": [".minttyrc", ".wslconfig"]
                }
            ]
        },
        {
            "comment": "Basic JSON files",
            "syntaxes": "scope:source.json",
            "selector": "text.plain",
            "rules": [
                {
                    "constraint": "is_extension",
                    "args": [".css.map", ".geojson", ".js.map", ".jsonc", ".webmanifest"]
                },
                {
                    "constraint": "is_name",
                    "args": [
                        ".babelrc",
                        ".bowerrc",
                        ".csslintrc",
                        ".eslintrc",
                        ".jscsrc",
                        ".jshintrc",
                        ".markdownlintrc",
                        ".stylelintrc"
                    ]
                }
            ]
        },
        {
            "comment": "Basic YAML files",
            "syntaxes": "scope:source.yaml",
            "selector": "text.plain",
            "rules": [
                {
                    "constraint": "is_name",
                    "args": [".clang-format", ".clang-tidy", ".clangd"]
                }
            ]
        },
        {
            "syntaxes": ["scope:source.shell.bash"],
            "selector": "text.plain",
            "rules": [
                {
                    "constraint": "is_name",
                    "args": ["profile", ".bash_history"]
                },
                {
                    "constraint": "name_contains_regex",
                    "args": ["\\.(?:bash|z(?:shrc|shenv|profile|login|logout))(?:\\.[^/]*)?$"]
                },
                {
                    "constraint": "first_line_contains_regex",
                    "args": [
                        // @see https://www.shellcheck.net/wiki/SC2148
                        "^\\s*#\\s+shellcheck\\s+shell=(?:bash|sh|zsh)"
                    ]
                }
            ]
        },
        {
            "comment": "Linux .env files",
            "syntaxes": [
                "/DotENV.", // https://packagecontrol.io/packages/DotENV
                "scope:source.shell.bash"
            ],
            "selector": "",
            "match": "all",
            "rules": [
                {
                    "rules": [
                        { "constraint": "selector_matches", "args": ["text.plain"] },
                        { "constraint": "is_hidden_syntax" }
                    ]
                },
                {
                    "rules": [
                        {
                            "constraint": "is_name",
                            "args": [".envrc"]
                        },
                        {
                            "constraint": "name_contains_regex",
                            "args": ["\\.(?:env)(?:\\.[^/]*)?$"]
                        }
                    ]
                }
            ]
        },
        {
            "syntaxes": "scope:text.git.config",
            "selector": "- text.git.config",
            "rules": [
                {
                    "constraint": "path_contains_regex",
                    "args": ["/\\.?git/config$"]
                }
            ]
        },
        {
            // at least, C++ is a super set of C in ST's syntax aspect
            "syntaxes": "scope:source.c++",
            "selector": "text.plain",
            "rules": [
                {
                    "constraint": "contains_regex",
                    "args": [
                        "(?:^|\\s)#include\\s*[<\"]",
                        "(?:^|\\s)#pragma\\s+(?:once|pack|(?:pop|push)_macro|warning)(?=$|\\s)",
                        "(?:^|\\s)template\\s*<\\s*(?:class|typename)(?=$|\\s)",
                        // some strong characteristics of keywords
                        "\\b(?:const(?:eval|expr|init)|decltype|nullptr|(?:const|dynamic|reinterpret|static)_cast)(?=$|\\s)"
                    ]
                }
            ]
        },
        {
            "syntaxes": "scope:source.cs",
            "selector": "text.plain",
            "match": "all",
            "rules": [
                {
                    "constraint": "contains_regex",
                    "args": ["^using\\s"]
                },
                {
                    "constraint": "contains_regex",
                    "args": ["^namespace\\s"]
                }
            ]
        },
        {
            "syntaxes": "scope:source.diff",
            "selector": "text.plain",
            "rules": [
                // path headers
                {
                    "match": "all",
                    "rules": [
                        {
                            "constraint": "contains_regex",
                            "args": ["^\\+{3} "]
                        },
                        {
                            "constraint": "contains_regex",
                            "args": ["^-{3} "]
                        }
                    ]
                },
                // context line numbers
                {
                    "constraint": "contains_regex",
                    "args": ["^@@ -\\d+,\\d+ \\+\\d+,\\d+ @@"]
                }
            ]
        },
        {
            "syntaxes": "scope:source.go",
            "selector": "text.plain",
            "match": "all",
            "rules": [
                {
                    "constraint": "contains_regex",
                    "args": ["^(?:package)\\s"]
                },
                {
                    "constraint": "contains_regex",
                    "args": ["^(?:import|func|type)\\s"]
                }
            ]
        },
        {
            "syntaxes": ["Jenkinsfile", "scope:source.groovy"],
            "selector": "text.plain",
            "rules": [
                {
                    "constraint": "name_contains_regex",
                    "args": ["^Jenkinsfile(?=\\b|_)"]
                }
            ]
        },
        {
            "syntaxes": "scope:source.java",
            "selector": "text.plain",
            "rules": [
                {
                    "constraint": "first_line_contains_regex",
                    "args": ["^\\s*import\\s+java\\."]
                },
                {
                    "constraint": "contains_regex",
                    "args": ["\\bimport\\s+java\\.", "\\bSystem\\.out\\.println\\s*\\("],
                    "kwargs": { "threshold": 2 }
                }
            ]
        },
        {
            "syntaxes": "scope:source.js",
            "selector": "text.plain",
            "match": "all",
            "rules": [
                {
                    "constraint": "is_magika_enabled",
                    "inverted": true
                },
                {
                    "constraint": "contains_regex",
                    "args": [
                        "\\bconsole\\.(?:assert|debug|error|info|log|trace|warn)\\s*\\(",
                        "(?:^|\\s)export\\s+default\\s"
                    ]
                }
            ]
        },
        {
            "syntaxes": "scope:source.lua",
            "selector": "text.plain",
            "rules": [
                {
                    "constraint": "is_name",
                    "args": [".conkyrc"]
                },
                {
                    "constraint": "is_interpreter",
                    "args": ["lua"]
                }
            ]
        },
        {
            "comment": "Makefile",
            "syntaxes": ["scope:source.makefile"],
            "selector": "text.plain",
            "rules": [
                {
                    "constraint": "name_contains_regex",
                    "args": ["^Makefile\\."],
                    "kwargs": { "regex_flags": ["IGNORECASE"] }
                },
                {
                    "constraint": "contains_regex",
                    "args": ["^.PHONY\\s*:"]
                }
            ]
        },
        {
            // use the % regex to detect Matlab files
            "syntaxes": "scope:source.matlab",
            "selector": "text.plain | source.objc",
            "match": "all",
            "rules": [
                {
                    "constraint": "is_extension",
                    "args": [".m"]
                },
                {
                    "constraint": "contains_regex",
                    "args": ["^\\s*%"],
                    "kwargs": { "threshold": 2 }
                }
            ]
        },
        {
            // .m files could be Objective-C or Matlab files
            // We first use a rather reliable regex from GitHub
            // https://github.com/github/linguist/blob/master/lib/linguist/heuristics.rb#L69
            // to apply syntax for Objective-C files
            "syntaxes": "scope:source.objc",
            "selector": "text.plain | source.matlab",
            "match": "all",
            "rules": [
                {
                    "constraint": "is_extension",
                    "args": [".m"]
                },
                {
                    "constraint": "contains_regex",
                    "args": [
                        "^\\s*(?:@(?:interface|class|protocol|property|end|synchronised|selector|implementation)\\b|#import\\s+.+\\.h[\">])"
                    ]
                }
            ]
        },
        {
            "comment": "Python requirements.txt from https://packagecontrol.io/packages/requirementstxt",
            "syntaxes": ["scope:source.requirementstxt", "scope:source.pip-requirements"],
            "selector": "text.plain",
            "rules": [
                {
                    "constraint": "name_contains_regex",
                    "args": ["^requirements([-_.].+)?\\.(in|txt)$"]
                }
            ]
        },
        {
            "comment": "\"Ruby on Rails\" project",
            "syntaxes": "scope:source.ruby.rails",
            "selector": "source.ruby",
            "match": "all",
            "rules": [
                {
                    "constraint": "is_extension",
                    "args": [".rb", ".rake"]
                },
                {
                    "constraint": "is_in_ruby_on_rails_project"
                }
            ]
        },
        {
            "syntaxes": "scope:source.ruby",
            "selector": "text.plain",
            "rules": [
                {
                    "constraint": "is_extension",
                    "args": [".simplecov"]
                },
                {
                    "constraint": "is_name",
                    "args": ["Cartfile", "Cartfile.private", "Cartfile.resolved", "config.ru", "Dangerfile"],
                    "kwargs": { "case_insensitive": true }
                },
                {
                    "constraint": "is_interpreter",
                    "args": ["ruby"]
                }
            ]
        },
        {
            "comment": "SSH config from https://packagecontrol.io/packages/SSH%20Config",
            "syntaxes": ["scope:source.ssh_config", "scope:source.ssh-config"],
            // some syntaxes just aggresively set "config" filename as XML file
            "selector": "text.plain | text.xml.config",
            "rules": [
                {
                    "constraint": "path_contains_regex",
                    "args": ["/\\.ssh/config$"]
                }
            ]
        },
        {
            // Meteor templates follow Handlebars syntax, but must end in .html;
            // but they also always begin with `<template name=`
            "syntaxes": "scope:text.html.handlebars",
            "selector": "text.plain | text.html",
            "match": "all",
            "rules": [
                {
                    "constraint": "is_extension",
                    "args": [".html"]
                },
                {
                    "constraint": "first_line_contains_regex",
                    "args": ["^<template name="]
                }
            ]
        },
        {
            "comment": "Django templates",
            "syntaxes": ["scope:text.jinja", "scope:text.html.jinja"],
            "selector": "text.html.basic",
            "match": "all",
            "rules": [
                {
                    "constraint": "path_contains",
                    "args": ["/templates/"]
                },
                {
                    "constraint": "is_in_python_django_project"
                }
            ]
        },
        {
            "comment": "Jinja2/Twig HTML files",
            "syntaxes": ["scope:text.jinja", "scope:text.html.jinja", "scope:text.html.twig"],
            "selector": "text.html.basic",
            "rules": [
                {
                    "constraint": "contains_regex",
                    "args": [
                        "{{",
                        // https://jinja.palletsprojects.com/en/latest/templates/
                        "{%\\s*(?:autoescape|call|elif|else|extends|filter|for|from|if|import|include|macro|set|trans|with)\\b"
                    ],
                    "kwargs": { "threshold": 4 }
                }
            ]
        },
        {
            "syntaxes": "scope:source.sql",
            "selector": "text.plain",
            "rules": [
                {
                    "constraint": "first_line_contains",
                    "args": ["-- phpMyAdmin SQL Dump"]
                },
                {
                    "constraint": "contains_regex",
                    "args": ["\\bCREATE\\s+TABLE\\s+IF\\s+NOT\\s+EXISTS\\b"],
                    "kwargs": { "regex_flags": ["MULTILINE", "IGNORECASE"] }
                }
            ]
        },
        {
            "syntaxes": "scope:source.typoscript",
            "selector": "text.plain",
            "rules": [
                {
                    "constraint": "is_name",
                    "args": ["ext_conf_template.txt", "ext_typoscript_constants.txt", "ext_typoscript_setup.txt"]
                },
                {
                    "constraint": "path_contains_regex",
                    "args": ["^.*/(?:fileadmin|typo3|TypoScript).*/(?:setup|constants)\\.txt$"]
                }
            ]
        },
        {
            "comment": "Apache config",
            "syntaxes": "scope:source.apacheconf",
            "selector": "text.plain | source.nginx",
            "rules": [
                {
                    "constraint": "path_contains_regex",
                    "args": ["\\b(?i:apache|httpd)\\b.*/conf/.*\\.conf$"]
                },
                {
                    "constraint": "contains_regex",
                    "args": ["<(?:VirtualHost|Directory|Macro)(?:$|\\s)"]
                }
            ]
        },
        {
            "comment": "NGINX config",
            "syntaxes": "scope:source.nginx",
            "selector": "text.plain | source.apacheconf",
            "rules": [
                {
                    "constraint": "path_contains_regex",
                    "args": ["\\b(?i:nginx)\\b.*/conf/.*\\.conf$"]
                },
                {
                    "constraint": "contains_regex",
                    "args": ["^\\s*(?:location\\s+(?:[~=/a-zA-Z])|(?:fastcgi_param|charset_map)\\s)"]
                }
            ]
        },
        {
            // @see https://doc.qt.io/qt-5/qt-conf.html
            "comment": "Qt's config file",
            "syntaxes": "scope:source.ini",
            "selector": "- source.ini",
            "rules": [
                {
                    "constraint": "is_name",
                    "args": ["qt.conf"]
                }
            ]
        },
        {
            // @see https://doc.qt.io/qtvstools/qtvstools-translation-files.html
            "comment": "Qt's translation file",
            "syntaxes": "scope:text.xml",
            "selector": "source.ts",
            "match": "all",
            "rules": [
                {
                    "constraint": "is_extension",
                    "args": [".ts"]
                },
                {
                    "constraint": "first_line_contains_regex",
                    "args": ["^\\s*<\\?xml(?:$|\\s)"]
                }
            ]
        },
        {
            "comment": "Sublime Text/Merge changelog",
            "syntaxes": "scope:text.html.basic",
            "selector": "text.plain",
            "match": "all",
            "rules": [
                {
                    "constraint": "is_name",
                    "args": ["changelog.txt"]
                },
                {
                    "constraint": "relative_exists",
                    "args": ["sublime_text", "sublime_text.exe", "sublime_merge", "sublime_merge.exe"]
                }
            ]
        },
        {
            "comment": "Package Control: Package installation/update messages",
            "syntaxes": "scope:text.html.markdown",
            "selector": "text.plain",
            "rules": [
                {
                    "constraint": "first_line_contains_regex",
                    "args": ["^Package Control Messages(?:$|\\s)"]
                }
            ]
        }
    ],
    // Suffixes that will be used to right trim the filename.
    // By doing that, the file may be then auto set syntax with a trimmed filename.
    "default_trim_suffixes": [
        "-dev",
        "-development",
        "-dist",
        "-optional",
        "-prod",
        "-production",
        "-qa",
        "-test",
        ".backup",
        ".bak",
        ".common",
        ".default",
        ".dev",
        ".dist",
        ".example",
        ".in",
        ".inc",
        ".include",
        ".local",
        ".orig",
        ".out",
        ".qa",
        ".sample",
        ".shared",
        ".temp",
        ".test",
        ".tmp",
        ".tpl"
    ],

    ///////////////////
    // Core Settings //
    //////////////////////////////////////////////////////////////////////////////////
    // These settings make this plugin function normally. You shouldn't touch them. //
    //////////////////////////////////////////////////////////////////////////////////

    "core_syntax_rules": [
        {
            "comment": "AutoSetSyntax Debug Information",
            "syntaxes": "scope:source.python",
            "selector": "text.plain",
            "rules": [
                {
                    "constraint": "first_line_contains_regex",
                    "args": ["^# === AutoSetSyntax Debug Information === #"]
                }
            ]
        }
    ],

    /////////////////////
    // Magika settings //
    /////////////////////

    // To use this feature, you have to install the "magika" library.
    // @see https://jfcherng-sublime.github.io/ST-AutoSetSyntax/experimental/dl-based-syntax-detection/#prerequisites
    "magika.enabled": false,
    "magika.min_confidence": 0.85,
    // To list supported file types, run shell command: `$ magika --list-output-content-types`
    // @see https://github.com/google/magika/blob/main/docs/supported_content_types_list.md
    "magika.syntax_map": {
        "appleplist": ["scope:text.xml.plist", "=xml"],
        "asm": [
            // no good way to do this?
            "scope:source.asm.x86_64",
            "scope:source.asm.arm",
            "scope:source.rvasm",
            "scope:source.assembly"
        ],
        "asp": ["scope:source.asp"],
        "batch": ["scope:source.dosbatch"],
        "c": ["scope:source.c++" /* magika can't distinguish between C and C++ */],
        "cs": ["scope:source.cs"],
        "css": ["scope:source.scss", "scope:source.css"],
        "csv": ["scope:text.advanced_csv", "scope:text.csv"],
        "go": ["scope:source.go"],
        "html": ["scope:text.html.basic"],
        "ini": ["scope:source.ini"],
        "java": ["scope:source.java"],
        "javascript": ["scope:source.ts" /* magika can't distinguish between TypeScript and JavaScript */],
        "json": ["scope:source.json"],
        "latex": ["scope:text.tex.latex"],
        "lisp": ["scope:source.lisp"],
        "m3u": ["scope:text.m3u"],
        "makefile": ["scope:source.makefile"],
        "markdown": ["scope:text.html.markdown"],
        "mum": ["=xml"],
        "pem": ["scope:text.pem"],
        "perl": ["scope:source.perl"],
        "php": ["scope:embedding.php", "scope:text.html.php"],
        "postscript": ["scope:source.postscript"],
        "powershell": ["scope:source.powershell"],
        "python": ["scope:source.python"],
        "rdf": ["=xml"],
        "rst": ["scope:text.restructuredtext"],
        "rtf": ["scope:text.rtf"],
        "ruby": ["scope:source.ruby"],
        "rust": ["scope:source.rust"],
        "scala": ["scope:source.scala"],
        "shell": ["scope:source.shell.bash"],
        "smali": ["scope:source.smali"],
        "sql": ["scope:source.sql"],
        "svg": ["=xml"],
        "txt": ["scope:text.plain"],
        "vba": ["scope:source.vbs"],
        "winregistry": ["scope:source.reg"],
        "xml": ["scope:text.xml"],
        "yaml": ["scope:source.yaml"]
    }
}
