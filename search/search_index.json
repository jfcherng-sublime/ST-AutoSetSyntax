{"config":{"lang":["en"],"separator":"[:\uff1a\u3001,\uff0c.\u3002!\uff01?\uff1f()\uff08\uff09/\uff0f]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>AutoSetSyntax v2 utilizes ST 4 plugin APIs along with Python 3.8.</p>"},{"location":"#overview","title":"Overview","text":"<p>AutoSetSyntax helps you set the syntax for a view automatically in various ways:</p> <ul> <li>Default syntax for new files and build outputs.</li> <li>Detecting the syntax when modifying the file.</li> <li>Trimming unimportant suffixes from the filename.</li> <li>Assigning syntax for Sublime Text syntax test files.</li> <li>Assigning syntax by the first line.</li> <li>User-defined rules.</li> <li>(Experimental) Deep learning based syntax detection. (Magika)</li> </ul> <p>If you want to learn more details, read \"Use Cases\" and \"Configurations\".</p>"},{"location":"#installation","title":"Installation","text":"<p>This package is available on Package Control by the name of AutoSetSyntax.</p> <p>Best Practice</p> <p>It's strongly recommended to install LSP and LSP-json to have a better experience for editing settings. At least, it will provide autocompletion and verification for settings of this plugin.</p>"},{"location":"#acknowledgment","title":"Acknowledgment","text":"<ul> <li>Plugin's original idea comes from \"Automatically set view syntax according to first line\".</li> <li>ApplySyntax, which AutoSetSyntax v2 is inspired by.</li> </ul>"},{"location":"#license","title":"License","text":"<p>Quote</p> <p>MIT License</p> <p>Copyright \u00a9 2017-2024 Jack Cherng jfcherng@gmail.com</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"changelog/","title":"AutoSetSyntax Changelog","text":""},{"location":"changelog/#410","title":"4.1.0","text":"<ul> <li>feat: check MD5 of downloaded <code>magika</code> dependencies</li> <li>refactor: <code>auto_set_syntax_debug_information</code> command creates a new view</li> <li>refactor: use flat dotted dict for Magika's syntax mapping</li> </ul>"},{"location":"changelog/#402","title":"4.0.2","text":"<ul> <li>chore: add more Magika file types</li> <li>chore: provide more precise matched reason</li> <li>refactor: remove more Node.js related things</li> </ul>"},{"location":"changelog/#401","title":"4.0.1","text":"<ul> <li>refactor: expose <code>ViewSnapshot</code> in <code>AutoSetSyntax.plugin</code></li> </ul>"},{"location":"changelog/#400","title":"4.0.0","text":"<ul> <li>refactor: retire <code>ViewSnapshotCollection</code></li> </ul> <p>This is a breaking change since all <code>match</code>es and <code>constraint</code>es receives   <code>ViewSnapshot</code> rather than <code>View</code> now. But most of users won't be affected.</p> <ul> <li>refactor: improve <code>magika</code> detection performance for unmodified files</li> </ul>"},{"location":"changelog/#312","title":"3.1.2","text":"<ul> <li>chore: refine <code>requirements.txt</code> rule pattern</li> <li>chore: add <code>PEM</code> syntax mapping for magika</li> <li>chore: fix docs link</li> </ul>"},{"location":"changelog/#311","title":"3.1.1","text":"<ul> <li>fix: exception related to <code>None</code> when triggered frequently</li> </ul>"},{"location":"changelog/#310","title":"3.1.0","text":"<ul> <li>feat: configurable debounce time via <code>debounce</code> setting</li> </ul>"},{"location":"changelog/#302","title":"3.0.2","text":"<ul> <li>fix: JSON with XSSI protection prefix doesn't work</li> <li>fix: first line syntax detection doesn't work while typing</li> </ul> <p>E.g., type <code>&lt;?php</code> and then press Enter. It should be detected as <code>PHP</code>.</p> <ul> <li>refactor: file_name_unhidden should base on <code>lstrip()</code></li> </ul>"},{"location":"changelog/#301","title":"3.0.1","text":"<ul> <li>fix: better detection for JSON with XSSI protection prefix</li> </ul>"},{"location":"changelog/#300","title":"3.0.0","text":"<ul> <li>refactor: remove <code>guesslang</code> (now we prefer <code>magika</code>)</li> </ul>"},{"location":"changelog/#2120","title":"2.12.0","text":"<ul> <li>feat: experimental <code>Magika</code> syntax detect method</li> </ul> <p>See documentation for more details.   https://jfcherng-sublime.github.io/ST-AutoSetSyntax/experimental/dl-based-syntax-detection/</p>"},{"location":"changelog/#21118","title":"2.11.18","text":"<ul> <li>chore: match \"requirements.in\" as Python <code>requirements.txt</code></li> <li>chore: rename \"special cases\" to \"heuristics\"</li> </ul>"},{"location":"changelog/#21117","title":"2.11.17","text":"<ul> <li>chore: add rule for Python <code>requirements.txt</code> files</li> <li>chore: add rule for SSH config files</li> </ul>"},{"location":"changelog/#21116","title":"2.11.16","text":"<ul> <li>chore: assign <code>Bash</code> syntax for <code># shellcheck shell=sh</code> first line</li> </ul>"},{"location":"changelog/#21115","title":"2.11.15","text":"<ul> <li>fix: <code>syntax.name</code> maybe an empty string</li> </ul>"},{"location":"changelog/#21114","title":"2.11.14","text":"<ul> <li>feat: auto detect Electron/VSCode/VSCodium for <code>guesslang.node_bin</code></li> </ul>"},{"location":"changelog/#21113","title":"2.11.13","text":"<ul> <li>refactor: auto determinate <code>guesslang.node_bin</code> by default</li> </ul>"},{"location":"changelog/#21112","title":"2.11.12","text":"<ul> <li>fix: also guess syntax when untransientize</li> <li>refactor: upgrade more py38 syntax</li> </ul>"},{"location":"changelog/#21111","title":"2.11.11","text":"<ul> <li>fix: don't apply JSON syntax if non-plaintext already</li> </ul>"},{"location":"changelog/#21110","title":"2.11.10","text":"<ul> <li>feat: improve assigning JSON syntax for large JSON file</li> </ul>"},{"location":"changelog/#2119","title":"2.11.9","text":"<ul> <li>chore: improve rule for git config file</li> </ul>"},{"location":"changelog/#2118","title":"2.11.8","text":"<ul> <li>refactor: tidy codes</li> </ul>"},{"location":"changelog/#2117","title":"2.11.7","text":"<ul> <li>fix: Electron path of <code>lsp_utils</code></li> </ul>"},{"location":"changelog/#2116","title":"2.11.6","text":"<ul> <li>fix: lots of error messages with GitSavvy (continued)</li> </ul> <p>For the <code>AutoSetSyntax: Clear Log Panel</code> case.</p>"},{"location":"changelog/#2115","title":"2.11.5","text":"<ul> <li>fix: lots of error messages with <code>GitSavvy</code></li> </ul> <p>For more details, see https://discord.com/channels/280102180189634562/280157067396775936/1083804884924633088</p> <ul> <li>refactor: remove useless <code>guesslang.confidence_threshold</code> setting</li> </ul>"},{"location":"changelog/#2114","title":"2.11.4","text":"<ul> <li>fix: shebang should be preferred over filename</li> </ul>"},{"location":"changelog/#2113","title":"2.11.3","text":"<ul> <li>chore: add <code>Dangerfile</code> to Ruby patterns</li> <li>feat: <code>lsp_utils_node_bin</code> prefers electron if available</li> </ul>"},{"location":"changelog/#2112","title":"2.11.2","text":"<ul> <li>feat: (by default) auto determine guesslang server port</li> </ul>"},{"location":"changelog/#2111","title":"2.11.1","text":"<ul> <li>chore: update rules for Makefile</li> </ul>"},{"location":"changelog/#2110","title":"2.11.0","text":"<ul> <li>feat: add <code>loosy_version</code> kwarg to <code>is_interpreter</code> constraint</li> <li>fix: <code>run_on_startup_views</code> doesn't work in some cases</li> </ul>"},{"location":"changelog/#2107","title":"2.10.7","text":"<ul> <li>chore: add <code>.qa</code> and <code>.common</code> into <code>default_trim_suffixes</code></li> <li>feat: add to command palette: <code>AutoSetSyntax: Settings</code></li> <li>fix: <code>return</code> in <code>finally</code> overwrites <code>return</code> in <code>try</code></li> <li>fix: CVE-2007-4559 Patch</li> </ul>"},{"location":"changelog/#2106","title":"2.10.6","text":"<ul> <li>fix: wrong <code>lsp_utils</code>-managed node executable path on Linux</li> </ul>"},{"location":"changelog/#2105","title":"2.10.5","text":"<ul> <li>fix: <code>RE_VIM_SYNTAX_LINE</code> also capture \"ft\" (abbr. of \"filetype\")</li> </ul>"},{"location":"changelog/#2104","title":"2.10.4","text":"<ul> <li>fix: many log messages aren't shown in the panel when ST starts</li> <li>fix: don't exception when close 2<sup>nd</sup> window when <code>enable_log=false</code></li> <li>refactor: don't show \"\u23f3 Calm down!...\" if <code>enable_log=false</code></li> </ul>"},{"location":"changelog/#2103","title":"2.10.3","text":"<ul> <li>fix: \"multiple text changes at once\" is not detected</li> </ul>"},{"location":"changelog/#2102","title":"2.10.2","text":"<ul> <li>feat: detect \"shellcheck directive\" for bash/zsh</li> </ul>"},{"location":"changelog/#2101","title":"2.10.1","text":"<ul> <li>refactor: about <code>ViewSnapshot</code>...</li> </ul>"},{"location":"changelog/#2100","title":"2.10.0","text":"<ul> <li>chore: improve <code>.env</code> files rules</li> <li>feat: new constraint: <code>selector_matches</code></li> <li>feat: new constraint: <code>is_hidden_syntax</code></li> <li>feat: new constraint: <code>is_syntax</code></li> </ul>"},{"location":"changelog/#299","title":"2.9.9","text":"<ul> <li>chore: improve <code>.env</code> files for AFileIcon users</li> </ul>"},{"location":"changelog/#298","title":"2.9.8","text":"<ul> <li>feat: add rules for <code>.env</code> files</li> <li>refactor: guesslang server only has one model now</li> </ul>"},{"location":"changelog/#297","title":"2.9.7","text":"<ul> <li>fix: Unknown <code>languageId</code> from guesslang</li> <li>chore: remove useless Ruby rules</li> </ul>"},{"location":"changelog/#296","title":"2.9.6","text":"<ul> <li>fix: guesslang server doesn't response</li> </ul>"},{"location":"changelog/#295","title":"2.9.5","text":"<ul> <li>feat: add <code>match</code> kwarg to <code>relative_exists</code> constraint</li> <li>feat: tidy/add some new rules</li> </ul>"},{"location":"changelog/#294","title":"2.9.4","text":"<ul> <li>feat: new constraint: <code>is_in_python_django_project</code></li> <li>refactor: replace <code>is_rails_file</code> with <code>is_in_ruby_on_rails_project</code></li> <li>chore: improve Django template files detection</li> </ul>"},{"location":"changelog/#293","title":"2.9.3","text":"<ul> <li>feat: add <code>Jinja2</code> rules for HTML files</li> <li>refactor: remove \"Migration\" things</li> </ul>"},{"location":"changelog/#292","title":"2.9.2","text":"<ul> <li>chore: update guesslang server</li> </ul>"},{"location":"changelog/#291","title":"2.9.1","text":"<ul> <li>chore: load plugin synchronously</li> </ul>"},{"location":"changelog/#290","title":"2.9.0","text":"<ul> <li>chore: update guesslang server</li> <li>feat: new constraint: <code>is_line_count</code></li> <li>refactor: bump min ST version to 4114</li> </ul>"},{"location":"changelog/#286","title":"2.8.6","text":"<p>No change. Just to tackle with messed up versions.</p>"},{"location":"changelog/#285","title":"2.8.5","text":"<ul> <li>fix: syntax highlighting for log panel</li> </ul>"},{"location":"changelog/#284","title":"2.8.4","text":"<ul> <li>chore: tidy debug messages</li> <li>fix: empty \"on_events\" doesn't work as expected</li> </ul>"},{"location":"changelog/#283","title":"2.8.3","text":"<ul> <li>chore: change default <code>trim_file_size</code> to <code>20000</code> (about 20KB)</li> <li>chore: change default <code>trim_first_line_length</code> to <code>500</code></li> <li>feat: debounce detection when text changes</li> <li>perf: fire <code>on_text_changed_async</code> only when syntax is plain text</li> </ul>"},{"location":"changelog/#282","title":"2.8.2","text":"<ul> <li>chore: update guesslang server</li> <li>chore: add <code>.in</code> into <code>default_trim_suffixes</code></li> </ul>"},{"location":"changelog/#281","title":"2.8.1","text":"<ul> <li>chore: update guesslang server</li> </ul>"},{"location":"changelog/#280","title":"2.8.0","text":"<ul> <li>fix: guesslang on hidden file without an extension</li> <li>feat: auto set syntax for ST syntax test files</li> </ul> <p>This should be useful for those who have no file extension.</p>"},{"location":"changelog/#270","title":"2.7.0","text":"<ul> <li>feat: add new setting <code>trim_suffixes_auto</code></li> </ul> <p>Apart from <code>trim_suffixes</code>, also try to remove every sub-extensions when finding a syntax match.   For example, for the file <code>foo.json.ext1.ext2.ext3</code>, this setting enables trying the following file names as well.</p> <ul> <li><code>foo.json.ext1.ext2</code> (no matching syntax)</li> <li><code>foo.json.ext1</code> (no matching syntax)</li> <li><code>foo.json</code> (matches <code>JSON</code> syntax)</li> <li>If there is no <code>JSON</code> syntax, then <code>foo</code> will be tried.</li> </ul>"},{"location":"changelog/#2610","title":"2.6.10","text":"<ul> <li>fix: RuntimeError: dictionary changed size during iteration</li> </ul>"},{"location":"changelog/#269","title":"2.6.9","text":"<ul> <li>feat: treat files started with <code>Makefile.</code> as Makefile</li> </ul> <p>Such as <code>Makefile.build</code>, <code>Makefile.debug</code>, etc...</p>"},{"location":"changelog/#268","title":"2.6.8","text":"<ul> <li>chore: update guesslang server</li> </ul>"},{"location":"changelog/#267","title":"2.6.7","text":"<ul> <li>fix: <code>Jenkinsfile</code> is detected as Python</li> <li>fix: detect VIM syntax settings not only at the first line</li> </ul>"},{"location":"changelog/#266","title":"2.6.6","text":"<ul> <li>fix: nested MatchRules without \"match\" doesn't work (#11)</li> <li>refactor: get rid of \"..\" from path</li> </ul>"},{"location":"changelog/#265","title":"2.6.5","text":"<ul> <li>refactor: assume guesslang server starts if port is already in use</li> </ul>"},{"location":"changelog/#264","title":"2.6.4","text":"<ul> <li>chore: update language detection model</li> </ul>"},{"location":"changelog/#263","title":"2.6.3","text":"<ul> <li>refactor: allow manually run AI model on plain text file</li> </ul>"},{"location":"changelog/#262","title":"2.6.2","text":"<ul> <li>fix: <code>auto_set_syntax_create_new_xxx</code> commands not working</li> <li>fix: command name CamelCase</li> <li>refactor: simplify <code>boot.py</code></li> </ul>"},{"location":"changelog/#261","title":"2.6.1","text":"<ul> <li>fix: internal states for running <code>ClearLogPanel</code> from command palette</li> <li>fix: modules should be reloaded when update plugin</li> <li>refactor: squash log messages if they are duplicate</li> </ul>"},{"location":"changelog/#260","title":"2.6.0","text":"<ul> <li>feat: introduce a new AI model (<code>vscode-regexp-languagedetection</code>) which comes from VSCode 1.65.0</li> </ul> <p>It will be used by default for small buffer if <code>guesslang.enabled</code> is <code>true</code>.   To use it, you have to run <code>AutoSetSyntax: Download Guesslang Server</code> from the command palette again.</p>"},{"location":"changelog/#250","title":"2.5.0","text":"<ul> <li>refactor: let <code>guesslang</code> server guess JS vs TS if possible</li> <li>feat: add new constraint: <code>is_guesslang_enabled</code></li> <li>fix: \"invert\" typo in <code>sublime-package.json</code></li> </ul>"},{"location":"changelog/#244","title":"2.4.4","text":"<ul> <li>chore: revise menu wording</li> <li>dosc: update missing 2.4.3 changelog</li> <li>refactor: remove leading plugin name from log panel</li> <li>refactor: tidy codes</li> </ul>"},{"location":"changelog/#243","title":"2.4.3","text":"<ul> <li>fix: set <code>is_widget</code> for the log panel</li> </ul>"},{"location":"changelog/#242","title":"2.4.2","text":"<ul> <li>docs: add use case for dim out build status from the build output panel</li> <li>fix: <code>guesslang</code> server connection failed on Linux</li> <li>refactor: bundled syntaxes</li> </ul>"},{"location":"changelog/#241","title":"2.4.1","text":"<ul> <li>refactor: refine scope for <code>ExecOutput.sublime-syntax</code></li> </ul>"},{"location":"changelog/#240","title":"2.4.0","text":"<ul> <li>feat: set default syntax for build output panel</li> <li>fix: partial path syntax representation not working</li> </ul>"},{"location":"changelog/#2314","title":"2.3.14","text":"<ul> <li>fix: plugin is triggered before settings are ready</li> <li>refactor: make checking <code>guesslang</code> server started more clearly</li> <li>refactor: simply command <code>auto_set_syntax_create_new_implementation</code></li> </ul>"},{"location":"changelog/#2313","title":"2.3.13","text":"<ul> <li>fix: correct type annotation for <code>ExpandableVar</code></li> <li>fix: various constraints give wrong results</li> <li>pref: refactor <code>generate_trimmed_strings()</code> with trie</li> <li>refactor: make <code>event_name</code> into <code>Enum</code></li> </ul>"},{"location":"changelog/#2312","title":"2.3.12","text":"<ul> <li>feat: add as YAML file: <code>.clang-format</code>, <code>.clang-tidy</code>, <code>.clangd</code></li> </ul>"},{"location":"changelog/#2311","title":"2.3.11","text":"<ul> <li>feat: add <code>.shared</code> into trimmed suffixes</li> <li>refactor: simplify codes</li> <li>test: add an PHP as xxx.sh file sample</li> </ul>"},{"location":"changelog/#2310","title":"2.3.10","text":"<ul> <li>fix: always prefer shebang over filename</li> <li>chore: improve debug messages</li> <li>chore: update JSON rule as per ApplySytnax's</li> </ul>"},{"location":"changelog/#239","title":"2.3.9","text":"<ul> <li>feat: add <code>case_insensitive</code> for <code>is_extension</code> constraint</li> <li>docs: add hinting for Win7 with Node.js v14</li> </ul>"},{"location":"changelog/#238","title":"2.3.8","text":"<ul> <li>chore: fix outdated <code>sublime-package.json</code> contents</li> <li>feat: add a rule for ST/SM <code>changelog.txt</code></li> <li>feat: add new constraints <code>is_arch</code>, <code>is_platform</code> and <code>is_platform_arch</code></li> <li>fix: also try trimmed filename when triggered by a command</li> </ul>"},{"location":"changelog/#237","title":"2.3.7","text":"<ul> <li>feat: add a rule for <code>SQL</code></li> <li>fix: <code>head_tail_content()</code> wrong tail content</li> <li>chore: add some debug message for guesslang</li> </ul>"},{"location":"changelog/#236","title":"2.3.6","text":"<ul> <li>fix: recheck view syntax again before setting syntax by guesslang</li> </ul>"},{"location":"changelog/#235","title":"2.3.5","text":"<ul> <li>fix: auto restart guesslang server after running install command</li> <li>fix: download guesslang server by chunks</li> <li>refactor: use hardcoded guesslang server download URL</li> <li>chore: also check guesslang server bin existence after downloading</li> </ul>"},{"location":"changelog/#234","title":"2.3.4","text":"<ul> <li>fix: <code>auto_set_syntax_download_guesslang_server</code> command doesn't create folder recursively</li> </ul>"},{"location":"changelog/#233","title":"2.3.3","text":"<ul> <li>fix: <code>auto_set_syntax_download_guesslang_server</code> command failure because files/directories are locked</li> </ul>"},{"location":"changelog/#232","title":"2.3.2","text":"<ul> <li>fix: do some basic checks for the guesslang-predicted syntax</li> </ul> <p>The model seems to predict some plain text as <code>INI</code> syntax quite frequently...</p>"},{"location":"changelog/#231","title":"2.3.1","text":"<ul> <li>fix: do not apply guesslang on files having an extension</li> </ul>"},{"location":"changelog/#230","title":"2.3.0","text":"<ul> <li>feat: predict syntax by a machine learning model</li> </ul> <p>This experimental feature is disabled by default.   It provides the same feature which is introduced in VSCode 1.60.   https://code.visualstudio.com/updates/v1_60#_automatic-language-detection   If you want to try it, please check the following link.   https://jfcherng-sublime.github.io/ST-AutoSetSyntax/experimental/ml-based-syntax-detection/</p> <ul> <li>chore: reduce default <code>trim_file_size</code> setting from <code>5000</code> to <code>4000</code></li> </ul>"},{"location":"changelog/#226","title":"2.2.6","text":"<ul> <li>feat: add a rule for <code>Java</code></li> <li>refactor: allow using <code>view_clear_undo_stack</code> in text commands</li> <li>refactor: use <code>set_read_only</code> to replace <code>command_mode</code></li> </ul>"},{"location":"changelog/#225","title":"2.2.5","text":"<ul> <li>fix: <code>View.clear_undo_stack</code> can not be run inside <code>TextCommand</code></li> <li>fix: some panel commands are not shown in command palette</li> <li>fix: <code>scope:output.autosetsyntax.log</code> not found during updating plugin</li> </ul>"},{"location":"changelog/#224","title":"2.2.4","text":"<ul> <li>fix: typo in default settings</li> </ul>"},{"location":"changelog/#223","title":"2.2.3","text":"<ul> <li>chore: prioritize plugin core syntax rules</li> </ul> <p>Otherwise, if the user has a bad syntax rule in user settings,   that may make debug information always be set with a wrong syntax.</p>"},{"location":"changelog/#222","title":"2.2.2","text":"<ul> <li>chore: add some comments for <code>sublime-package.json</code></li> <li>feat: add <code>case_insensitive</code> for <code>is_name</code> constraint</li> <li>feat: add a rule for <code>qt.conf</code></li> <li>fix: <code>is_size</code> constraint has no AC in settings</li> <li>perf: speedup detecting <code>TypoScript</code></li> </ul>"},{"location":"changelog/#221","title":"2.2.1","text":"<ul> <li>feat: add a rule for <code>qt.conf</code></li> </ul>"},{"location":"changelog/#220","title":"2.2.0","text":"<ul> <li>fix: <code>parse_regex_flags()</code> for duplicate flags</li> </ul>"},{"location":"changelog/#2111_1","title":"2.1.11","text":"<ul> <li>fix: apply a syntax via VIM modeline</li> </ul>"},{"location":"changelog/#2110_1","title":"2.1.10","text":"<ul> <li>feat: add a rule for Qt's translation files</li> <li>fix: AttributeError: type object 'View' has no attribute 'clear_undo_stack'</li> </ul>"},{"location":"changelog/#219","title":"2.1.9","text":"<ul> <li>refactor: make <code>trim_suffixes</code> more sorted</li> <li>fix: clear undo stack for the log panel</li> </ul>"},{"location":"changelog/#218","title":"2.1.8","text":"<ul> <li>fix: AutoSetSyntax debug info is not auto set syntax</li> <li>refactor: generate <code>syntax_rules</code> and <code>trim_suffixes</code> more statically</li> </ul>"},{"location":"changelog/#217","title":"2.1.7","text":"<ul> <li>fix: set syntax during typing not working</li> <li>chore: use <code>JSON</code> for js/css source map</li> </ul>"},{"location":"changelog/#216","title":"2.1.6","text":"<ul> <li>fix: auto trimmed filename should only works on plain text</li> </ul>"},{"location":"changelog/#215","title":"2.1.5","text":"<ul> <li>fix: overkill changing <code>.erb</code> files back to <code>HTML</code> syntax</li> </ul>"},{"location":"changelog/#214","title":"2.1.4","text":"<ul> <li>feat: add <code>lua</code> syntax rule</li> <li>feat: improve <code>is_interpreter</code> to match VIM's syntax line</li> </ul>"},{"location":"changelog/#213","title":"2.1.3","text":"<ul> <li>feat: add <code>Diff</code>, <code>JavaScript</code> syntax rules</li> <li>feat: add <code>threshold</code> <code>kwargs</code> for <code>contains</code> and <code>contains_regex</code></li> <li>chore: update <code>matlab</code> syntax rule</li> </ul>"},{"location":"changelog/#212","title":"2.1.2","text":"<ul> <li>feat: add <code>C#</code> syntax rule</li> </ul>"},{"location":"changelog/#211","title":"2.1.1","text":"<ul> <li>feat: add <code>C++</code> syntax rule</li> </ul>"},{"location":"changelog/#210","title":"2.1.0","text":"<ul> <li>feat: add new constraints: <code>is_in_hg_repo</code>, <code>is_in_svn_repo</code></li> </ul>"},{"location":"changelog/#201","title":"2.0.1","text":"<ul> <li>refactor: improve <code>is_extension</code> constraint</li> <li>perf: optimize <code>AbstractMatch.test_count()</code></li> </ul>"},{"location":"changelog/#200","title":"2.0.0","text":"<p>If you are a user from v1 with custom syntax rules, check the migration guide.</p> <ul> <li>refactor: completely rewritten to utilize ST 4 APIs and Python 3.8</li> <li>feat: users can define their <code>syntax</code> rules recursively with <code>match</code> rules and <code>constraint</code> rules</li> <li>feat: plugin logs are moved to a dedicated panel</li> <li>feat: <code>auto_set_syntax_debug_information</code> command to help user dump information for debugging</li> </ul> <p>For more details, visit the online documentation: https://jfcherng-sublime.github.io/ST-AutoSetSyntax/</p>"},{"location":"changelog/#11014","title":"1.10.14","text":"<ul> <li>refactor: run the whole <code>plugin_load()</code> async</li> </ul>"},{"location":"changelog/#11013","title":"1.10.13","text":"<ul> <li>fix: logger level names for Python 3.8</li> </ul>"},{"location":"changelog/#11012","title":"1.10.12","text":"<ul> <li>chore: auto set Package Control messages to Markdown</li> </ul>"},{"location":"changelog/#11011","title":"1.10.11","text":"<ul> <li>fix: plugin may be not prepared yet</li> </ul>"},{"location":"changelog/#11010","title":"1.10.10","text":"<ul> <li>refactor: improve the logic to get the first line</li> <li>fix: plugin may be not prepared yet</li> </ul>"},{"location":"changelog/#1109","title":"1.10.9","text":"<ul> <li>perf: run time-consuming codes asynchronously</li> </ul>"},{"location":"changelog/#1108","title":"1.10.8","text":"<ul> <li>fix: should not activate this plugin on widgets</li> </ul>"},{"location":"changelog/#1107","title":"1.10.7","text":"<ul> <li>revert: Revert \"Add .python-version for ST4\"</li> </ul> <p>This plugin depends on \"pyyaml\" module, which is not available   (Python 3.8) via package control at this moment.</p>"},{"location":"changelog/#1106","title":"1.10.6","text":"<ul> <li> <p>Let <code>Plain Text</code> be the last choice.   This makes <code>requirements.txt-optional</code> able to be detected as <code>requirements.txt</code>   and have syntax highlighting if there is a syntax for it.</p> </li> <li> <p>Add \"-optional\" into <code>try_filename_remove_exts</code>.</p> </li> </ul>"},{"location":"changelog/#1105","title":"1.10.5","text":"<ul> <li>Add \".orig\" to <code>try_filename_remove_exts</code>.</li> <li>Fix changing log level won't have effect immediately.</li> </ul>"},{"location":"changelog/#1104","title":"1.10.4","text":"<ul> <li>Add \"-dist\" to <code>try_filename_remove_exts</code>.</li> <li>Workaround inline regex flags (such as <code>(?x: ... )</code>) are not supported by Python 3.3.</li> <li>Workaround some syntax files that are unable to parse before.</li> <li>Fix log messages appear twice in ST's console.</li> <li>Improved log messages.</li> <li>Some refactor.</li> </ul>"},{"location":"changelog/#1103","title":"1.10.3","text":"<ul> <li>Put menu files to <code>menus/</code>.</li> <li>Update <code>try_filename_remove_exts</code>.</li> </ul> <p>Add \"-dev\", \"-development\", \"-prod\", \"-production\", \"-test\", \".test\", \".tpl\".</p>"},{"location":"changelog/#1102","title":"1.10.2","text":"<ul> <li>Add the command to the command palette.</li> </ul>"},{"location":"changelog/#1101","title":"1.10.1","text":"<ul> <li>Use a new side-by-side window to edit settings.</li> </ul>"},{"location":"changelog/#1100","title":"1.10.0","text":"<ul> <li>New feature: Auto set syntax when creating a new file.</li> </ul> <p>See the \"new_file_syntax\" settings.</p>"},{"location":"changelog/#191","title":"1.9.1","text":"<ul> <li>Remove debugging codes.</li> </ul>"},{"location":"changelog/#190","title":"1.9.0","text":"<ul> <li>New feature: Auto set syntax by stripping file extensions.</li> </ul> <p>When opening a default configuration file like <code>config.js.dist</code>.   Because there is no syntax for a <code>.js.dist</code> file or a <code>.dist</code> file,   the file will be opened as plain text without syntax highlighting.</p> <p>This feature tries to remove some common unimportant extensions such as <code>.dist</code>, <code>.sample</code>, ... etc   from the file name. And test the stripped file name <code>config.js</code> with   syntax definitions and applies <code>Javascript</code> syntax to it.</p> <p>You could define extensions which would be tried to be removed in the   <code>try_filename_remove_exts</code> settings.</p>"},{"location":"changelog/#187","title":"1.8.7","text":"<ul> <li>Just some directory structure tweaks.</li> </ul>"},{"location":"changelog/#186","title":"1.8.6","text":"<ul> <li>Fix autocomplete is triggered in quick panel &amp; search panel (#3)</li> </ul>"},{"location":"changelog/#185","title":"1.8.5","text":"<ul> <li>Add config for <code>\"log_level\": \"NOTHING\"</code>.   <code>\"NOTSET\"</code> is not what I just thought. So add my own <code>\"log_lovel\": \"NOTHING\"</code>.</li> </ul>"},{"location":"changelog/#184","title":"1.8.4","text":"<ul> <li>Load yaml module by Package Control <code>dependencies.json</code>.</li> <li>Move SyntaxMappings.py into a sub-directory.</li> </ul>"},{"location":"changelog/#183","title":"1.8.3","text":"<ul> <li>Correct the usage of <code>settings.add_on_change()</code>.</li> </ul>"},{"location":"commands/","title":"Commands","text":""},{"location":"commands/#main","title":"Main","text":""},{"location":"commands/#auto_set_syntax","title":"<code>auto_set_syntax</code>","text":"<p>Example</p> <pre><code>{\n    \"caption\": \"AutoSetSyntax: Auto Set Syntax\",\n    \"command\": \"auto_set_syntax\",\n},\n</code></pre> <p>This command tries to set the syntax for the current view.</p> <p>Info</p> <p>You may consider AutoSetSyntax is kind of working in a way that it checks some prerequisites and triggers the <code>auto_set_syntax</code> command automatically. Although actually, AutoSetSyntax doesn't trigger the command.</p>"},{"location":"commands/#implementation","title":"Implementation","text":""},{"location":"commands/#auto_set_syntax_create_new_constraint","title":"<code>auto_set_syntax_create_new_constraint</code>","text":"<p>Example</p> <pre><code>{\n    \"caption\": \"AutoSetSyntax: Create New Constrant\",\n    \"command\": \"auto_set_syntax_create_new_constraint\",\n},\n</code></pre> <p>This command creates a template for a new <code>Constraint</code> implementation.</p>"},{"location":"commands/#auto_set_syntax_create_new_match","title":"<code>auto_set_syntax_create_new_match</code>","text":"<p>Example</p> <pre><code>{\n    \"caption\": \"AutoSetSyntax: Create New Match\",\n    \"command\": \"auto_set_syntax_create_new_match\",\n},\n</code></pre> <p>This command creates a template for a new <code>Match</code> implementation.</p>"},{"location":"commands/#logging","title":"Logging","text":""},{"location":"commands/#auto_set_syntax_toogle_log_panel","title":"<code>auto_set_syntax_toogle_log_panel</code>","text":"<p>Example</p> <pre><code>{\n    \"caption\": \"AutoSetSyntax: Toggle Log Panel\",\n    \"command\": \"auto_set_syntax_toggle_log_panel\",\n},\n</code></pre> <p>This command toggles the AutoSetSyntax log panel for the current window.</p>"},{"location":"commands/#auto_set_syntax_clear_log_panel","title":"<code>auto_set_syntax_clear_log_panel</code>","text":"<p>Example</p> <pre><code>{\n    \"caption\": \"AutoSetSyntax: Clear Log Panel\",\n    \"command\": \"auto_set_syntax_clear_log_panel\",\n},\n</code></pre> <p>This command clears the AutoSetSyntax log panel for the current window.</p>"},{"location":"commands/#debugging","title":"Debugging","text":""},{"location":"commands/#auto_set_syntax_debug_information","title":"<code>auto_set_syntax_debug_information</code>","text":"<p>Example</p> <pre><code>{\n    \"caption\": \"AutoSetSyntax: Debug Information\",\n    \"command\": \"auto_set_syntax_debug_information\",\n},\n</code></pre> <p>This command copies information for debugging to the clipboard. Check \"Debug\" for more details.</p>"},{"location":"configurations/","title":"Configurations","text":""},{"location":"configurations/#settings","title":"Settings","text":"<p>Sometimes, a good way to learn about settings is reading an existing one.</p> AutoSetSyntax.sublime-settings <pre><code>{\n    //////////////////////////////////////////////////////////\n    // Online Document                                      //\n    // https://jfcherng-sublime.github.io/ST-AutoSetSyntax/ //\n    //////////////////////////////////////////////////////////\n\n    ///////////////////\n    // User Settings //\n    ///////////////////\n\n    // The time (in secondes) to wait for the next event to be triggered.\n    \"debounce\": 0.3,\n    // Enable plugin log (in a dedicated panel)\n    \"enable_log\": true,\n    // Set default syntax for build outputs.\n    // Can be one of following formats:\n    //   - Syntax top scope: \"scope:text.html.markdown\"\n    //   - Partial/full syntax file path: \"Markdown/Markdown.\"\n    //   - The name of the syntax: \"Markdown\" (which is shown in the bottom-right corner of ST)\n    //   - An empty string, which does nothing\n    \"exec_file_syntax\": \"Packages/AutoSetSyntax/syntaxes/ExecOutput.sublime-syntax\",\n    // Set default syntax for new files. You can use multiple formats as described above.\n    \"new_file_syntax\": \"\",\n    // Run \"auto_set_syntax\" command on views which exist before the plugin is loaded?\n    \"run_on_startup_views\": false,\n    // The max lookup size for the file.\n    // A negative number means no limit, which may have performance issue on large files.\n    \"trim_file_size\": 20000, // about 20KB\n    // The max lookup length for the first line.\n    // A negative number means no limit, which may have performance issue on a long first line.\n    \"trim_first_line_length\": 500,\n    // Apart from \"trim_suffixes\", also try to remove every sub-extensions when finding a syntax match.\n    \"trim_suffixes_auto\": false,\n    // Syntax rules that will be checked one by one.\n    // This plugin will assign the syntax in the first satisfied rule to the view.\n    // You may want to see \"default_syntax_rules\" for some examples.\n    \"user_syntax_rules\": [],\n    // Suffixes that will be used to right trim the filename.\n    // By doing that, the file may be then auto set syntax with a trimmed filename.\n    \"user_trim_suffixes\": [],\n\n    //////////////////////\n    // Project Settings //\n    ////////////////////////////////////////////////////////////////////////////\n    // You shouldn't change these settings here but in your project settings. //\n    ////////////////////////////////////////////////////////////////////////////\n\n    // Syntax rules that will be checked one by one.\n    // This plugin will assign the syntax in the first satisfied rule to the view.\n    // You may want to see \"default_syntax_rules\" for some examples.\n    \"project_syntax_rules\": [],\n    // Suffixes that will be used to right trim the filename.\n    // By doing that, the file may be then auto set syntax with a trimmed filename.\n    \"project_trim_suffixes\": [],\n\n    //////////////////////\n    // Default Settings //\n    ////////////////////////////////////////////////////////////////////////////\n    // If you override default rules, they will not be updated in the future. //\n    // If you want to add new rules, add them in user settings.               //\n    ////////////////////////////////////////////////////////////////////////////\n\n    // Syntax rules that will be checked one by one.\n    // This plugin will assign the syntax in the first satisfied rule to the view.\n    \"default_syntax_rules\": [\n        // syntax rule\n        {\n            \"syntaxes\": \"scope:source.python\",\n            \"selector\": \"text.plain\",\n            // match rule\n            \"match\": \"all\", // \"any\" by default\n            \"rules\": [\n                // constraint rule\n                {\n                    \"constraint\": \"contains_regex\",\n                    \"args\": [\"^(?:def|class)\\\\s\"]\n                },\n                {\n                    \"constraint\": \"contains_regex\",\n                    \"args\": [\"^import(?!\\\\s+groovy)(?:$|[\\\\s(])\", \"^from\\\\s+[a-zA-Z.]+\\\\s+import(?:$|[\\\\s(])\"]\n                }\n            ]\n        },\n        {\n            \"comment\": \"Basic INI files\",\n            \"syntaxes\": \"scope:source.ini\",\n            \"selector\": \"text.plain\",\n            \"rules\": [\n                {\n                    \"constraint\": \"is_name\",\n                    \"args\": [\".minttyrc\", \".wslconfig\"]\n                }\n            ]\n        },\n        {\n            \"comment\": \"Basic JSON files\",\n            \"syntaxes\": \"scope:source.json\",\n            \"selector\": \"text.plain\",\n            \"rules\": [\n                {\n                    \"constraint\": \"is_extension\",\n                    \"args\": [\".css.map\", \".geojson\", \".js.map\", \".jsonc\", \".webmanifest\"]\n                },\n                {\n                    \"constraint\": \"is_name\",\n                    \"args\": [\n                        \".babelrc\",\n                        \".bowerrc\",\n                        \".csslintrc\",\n                        \".eslintrc\",\n                        \".jscsrc\",\n                        \".jshintrc\",\n                        \".markdownlintrc\",\n                        \".stylelintrc\"\n                    ]\n                }\n            ]\n        },\n        {\n            \"comment\": \"Basic YAML files\",\n            \"syntaxes\": \"scope:source.yaml\",\n            \"selector\": \"text.plain\",\n            \"rules\": [\n                {\n                    \"constraint\": \"is_name\",\n                    \"args\": [\".clang-format\", \".clang-tidy\", \".clangd\"]\n                }\n            ]\n        },\n        {\n            \"syntaxes\": [\"scope:source.shell.bash\"],\n            \"selector\": \"text.plain\",\n            \"rules\": [\n                {\n                    \"constraint\": \"is_name\",\n                    \"args\": [\"profile\", \".bash_history\"]\n                },\n                {\n                    \"constraint\": \"name_contains_regex\",\n                    \"args\": [\"\\\\.(?:bash|z(?:shrc|shenv|profile|login|logout))(?:\\\\.[^/]*)?$\"]\n                },\n                {\n                    \"constraint\": \"first_line_contains_regex\",\n                    \"args\": [\n                        // @see https://www.shellcheck.net/wiki/SC2148\n                        \"^\\\\s*#\\\\s+shellcheck\\\\s+shell=(?:bash|sh|zsh)\"\n                    ]\n                }\n            ]\n        },\n        {\n            \"comment\": \"Linux .env files\",\n            \"syntaxes\": [\n                \"/DotENV.\", // https://packagecontrol.io/packages/DotENV\n                \"scope:source.shell.bash\"\n            ],\n            \"selector\": \"\",\n            \"match\": \"all\",\n            \"rules\": [\n                {\n                    \"rules\": [\n                        { \"constraint\": \"selector_matches\", \"args\": [\"text.plain\"] },\n                        { \"constraint\": \"is_hidden_syntax\" }\n                    ]\n                },\n                {\n                    \"rules\": [\n                        {\n                            \"constraint\": \"is_name\",\n                            \"args\": [\".envrc\"]\n                        },\n                        {\n                            \"constraint\": \"name_contains_regex\",\n                            \"args\": [\"\\\\.(?:env)(?:\\\\.[^/]*)?$\"]\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            \"syntaxes\": \"scope:text.git.config\",\n            \"selector\": \"- text.git.config\",\n            \"rules\": [\n                {\n                    \"constraint\": \"path_contains_regex\",\n                    \"args\": [\"/\\\\.?git/config$\"]\n                }\n            ]\n        },\n        {\n            // at least, C++ is a super set of C in ST's syntax aspect\n            \"syntaxes\": \"scope:source.c++\",\n            \"selector\": \"text.plain\",\n            \"rules\": [\n                {\n                    \"constraint\": \"contains_regex\",\n                    \"args\": [\n                        \"(?:^|\\\\s)#include\\\\s*[&lt;\\\"]\",\n                        \"(?:^|\\\\s)#pragma\\\\s+(?:once|pack|(?:pop|push)_macro|warning)(?=$|\\\\s)\",\n                        \"(?:^|\\\\s)template\\\\s*&lt;\\\\s*(?:class|typename)(?=$|\\\\s)\",\n                        // some strong characteristics of keywords\n                        \"\\\\b(?:const(?:eval|expr|init)|decltype|nullptr|(?:const|dynamic|reinterpret|static)_cast)(?=$|\\\\s)\"\n                    ]\n                }\n            ]\n        },\n        {\n            \"syntaxes\": \"scope:source.cs\",\n            \"selector\": \"text.plain\",\n            \"match\": \"all\",\n            \"rules\": [\n                {\n                    \"constraint\": \"contains_regex\",\n                    \"args\": [\"^using\\\\s\"]\n                },\n                {\n                    \"constraint\": \"contains_regex\",\n                    \"args\": [\"^namespace\\\\s\"]\n                }\n            ]\n        },\n        {\n            \"syntaxes\": \"scope:source.diff\",\n            \"selector\": \"text.plain\",\n            \"rules\": [\n                // path headers\n                {\n                    \"match\": \"all\",\n                    \"rules\": [\n                        {\n                            \"constraint\": \"contains_regex\",\n                            \"args\": [\"^\\\\+{3} \"]\n                        },\n                        {\n                            \"constraint\": \"contains_regex\",\n                            \"args\": [\"^-{3} \"]\n                        }\n                    ]\n                },\n                // context line numbers\n                {\n                    \"constraint\": \"contains_regex\",\n                    \"args\": [\"^@@ -\\\\d+,\\\\d+ \\\\+\\\\d+,\\\\d+ @@\"]\n                }\n            ]\n        },\n        {\n            \"syntaxes\": \"scope:source.go\",\n            \"selector\": \"text.plain\",\n            \"match\": \"all\",\n            \"rules\": [\n                {\n                    \"constraint\": \"contains_regex\",\n                    \"args\": [\"^(?:package)\\\\s\"]\n                },\n                {\n                    \"constraint\": \"contains_regex\",\n                    \"args\": [\"^(?:import|func|type)\\\\s\"]\n                }\n            ]\n        },\n        {\n            \"syntaxes\": [\"Jenkinsfile\", \"scope:source.groovy\"],\n            \"selector\": \"text.plain\",\n            \"rules\": [\n                {\n                    \"constraint\": \"name_contains_regex\",\n                    \"args\": [\"^Jenkinsfile(?=\\\\b|_)\"]\n                }\n            ]\n        },\n        {\n            \"syntaxes\": \"scope:source.java\",\n            \"selector\": \"text.plain\",\n            \"rules\": [\n                {\n                    \"constraint\": \"first_line_contains_regex\",\n                    \"args\": [\"^\\\\s*import\\\\s+java\\\\.\"]\n                },\n                {\n                    \"constraint\": \"contains_regex\",\n                    \"args\": [\"\\\\bimport\\\\s+java\\\\.\", \"\\\\bSystem\\\\.out\\\\.println\\\\s*\\\\(\"],\n                    \"kwargs\": { \"threshold\": 2 }\n                }\n            ]\n        },\n        {\n            \"syntaxes\": \"scope:source.js\",\n            \"selector\": \"text.plain\",\n            \"match\": \"all\",\n            \"rules\": [\n                {\n                    \"constraint\": \"is_magika_enabled\",\n                    \"inverted\": true\n                },\n                {\n                    \"constraint\": \"contains_regex\",\n                    \"args\": [\n                        \"\\\\bconsole\\\\.(?:assert|debug|error|info|log|trace|warn)\\\\s*\\\\(\",\n                        \"(?:^|\\\\s)export\\\\s+default\\\\s\"\n                    ]\n                }\n            ]\n        },\n        {\n            \"syntaxes\": \"scope:source.lua\",\n            \"selector\": \"text.plain\",\n            \"rules\": [\n                {\n                    \"constraint\": \"is_name\",\n                    \"args\": [\".conkyrc\"]\n                },\n                {\n                    \"constraint\": \"is_interpreter\",\n                    \"args\": [\"lua\"]\n                }\n            ]\n        },\n        {\n            \"comment\": \"Makefile\",\n            \"syntaxes\": [\"scope:source.makefile\"],\n            \"selector\": \"text.plain\",\n            \"rules\": [\n                {\n                    \"constraint\": \"name_contains_regex\",\n                    \"args\": [\"^Makefile\\\\.\"],\n                    \"kwargs\": { \"regex_flags\": [\"IGNORECASE\"] }\n                },\n                {\n                    \"constraint\": \"contains_regex\",\n                    \"args\": [\"^.PHONY\\\\s*:\"]\n                }\n            ]\n        },\n        {\n            // use the % regex to detect Matlab files\n            \"syntaxes\": \"scope:source.matlab\",\n            \"selector\": \"text.plain | source.objc\",\n            \"match\": \"all\",\n            \"rules\": [\n                {\n                    \"constraint\": \"is_extension\",\n                    \"args\": [\".m\"]\n                },\n                {\n                    \"constraint\": \"contains_regex\",\n                    \"args\": [\"^\\\\s*%\"],\n                    \"kwargs\": { \"threshold\": 2 }\n                }\n            ]\n        },\n        {\n            // .m files could be Objective-C or Matlab files\n            // We first use a rather reliable regex from GitHub\n            // https://github.com/github/linguist/blob/master/lib/linguist/heuristics.rb#L69\n            // to apply syntax for Objective-C files\n            \"syntaxes\": \"scope:source.objc\",\n            \"selector\": \"text.plain | source.matlab\",\n            \"match\": \"all\",\n            \"rules\": [\n                {\n                    \"constraint\": \"is_extension\",\n                    \"args\": [\".m\"]\n                },\n                {\n                    \"constraint\": \"contains_regex\",\n                    \"args\": [\n                        \"^\\\\s*(?:@(?:interface|class|protocol|property|end|synchronised|selector|implementation)\\\\b|#import\\\\s+.+\\\\.h[\\\"&gt;])\"\n                    ]\n                }\n            ]\n        },\n        {\n            \"comment\": \"Python requirements.txt from https://packagecontrol.io/packages/requirementstxt\",\n            \"syntaxes\": [\"scope:source.requirementstxt\", \"scope:source.pip-requirements\"],\n            \"selector\": \"text.plain\",\n            \"rules\": [\n                {\n                    \"constraint\": \"name_contains_regex\",\n                    \"args\": [\"^requirements([-_.].+)?\\\\.(in|txt)$\"]\n                }\n            ]\n        },\n        {\n            \"comment\": \"\\\"Ruby on Rails\\\" project\",\n            \"syntaxes\": \"scope:source.ruby.rails\",\n            \"selector\": \"source.ruby\",\n            \"match\": \"all\",\n            \"rules\": [\n                {\n                    \"constraint\": \"is_extension\",\n                    \"args\": [\".rb\", \".rake\"]\n                },\n                {\n                    \"constraint\": \"is_in_ruby_on_rails_project\"\n                }\n            ]\n        },\n        {\n            \"syntaxes\": \"scope:source.ruby\",\n            \"selector\": \"text.plain\",\n            \"rules\": [\n                {\n                    \"constraint\": \"is_extension\",\n                    \"args\": [\".simplecov\"]\n                },\n                {\n                    \"constraint\": \"is_name\",\n                    \"args\": [\"Cartfile\", \"Cartfile.private\", \"Cartfile.resolved\", \"config.ru\", \"Dangerfile\"],\n                    \"kwargs\": { \"case_insensitive\": true }\n                },\n                {\n                    \"constraint\": \"is_interpreter\",\n                    \"args\": [\"ruby\"]\n                }\n            ]\n        },\n        {\n            \"comment\": \"SSH config from https://packagecontrol.io/packages/SSH%20Config\",\n            \"syntaxes\": [\"scope:source.ssh_config\", \"scope:source.ssh-config\"],\n            // some syntaxes just aggresively set \"config\" filename as XML file\n            \"selector\": \"text.plain | text.xml.config\",\n            \"rules\": [\n                {\n                    \"constraint\": \"path_contains_regex\",\n                    \"args\": [\"/\\\\.ssh/config$\"]\n                }\n            ]\n        },\n        {\n            // Meteor templates follow Handlebars syntax, but must end in .html;\n            // but they also always begin with `&lt;template name=`\n            \"syntaxes\": \"scope:text.html.handlebars\",\n            \"selector\": \"text.plain | text.html\",\n            \"match\": \"all\",\n            \"rules\": [\n                {\n                    \"constraint\": \"is_extension\",\n                    \"args\": [\".html\"]\n                },\n                {\n                    \"constraint\": \"first_line_contains_regex\",\n                    \"args\": [\"^&lt;template name=\"]\n                }\n            ]\n        },\n        {\n            \"comment\": \"Django templates\",\n            \"syntaxes\": [\"scope:text.jinja\", \"scope:text.html.jinja\"],\n            \"selector\": \"text.html.basic\",\n            \"match\": \"all\",\n            \"rules\": [\n                {\n                    \"constraint\": \"path_contains\",\n                    \"args\": [\"/templates/\"]\n                },\n                {\n                    \"constraint\": \"is_in_python_django_project\"\n                }\n            ]\n        },\n        {\n            \"comment\": \"Jinja2/Twig HTML files\",\n            \"syntaxes\": [\"scope:text.jinja\", \"scope:text.html.jinja\", \"scope:text.html.twig\"],\n            \"selector\": \"text.html.basic\",\n            \"rules\": [\n                {\n                    \"constraint\": \"contains_regex\",\n                    \"args\": [\n                        \"{{\",\n                        // https://jinja.palletsprojects.com/en/latest/templates/\n                        \"{%\\\\s*(?:autoescape|call|elif|else|extends|filter|for|from|if|import|include|macro|set|trans|with)\\\\b\"\n                    ],\n                    \"kwargs\": { \"threshold\": 4 }\n                }\n            ]\n        },\n        {\n            \"syntaxes\": \"scope:source.sql\",\n            \"selector\": \"text.plain\",\n            \"rules\": [\n                {\n                    \"constraint\": \"first_line_contains\",\n                    \"args\": [\"-- phpMyAdmin SQL Dump\"]\n                },\n                {\n                    \"constraint\": \"contains_regex\",\n                    \"args\": [\"\\\\bCREATE\\\\s+TABLE\\\\s+IF\\\\s+NOT\\\\s+EXISTS\\\\b\"],\n                    \"kwargs\": { \"regex_flags\": [\"MULTILINE\", \"IGNORECASE\"] }\n                }\n            ]\n        },\n        {\n            \"syntaxes\": \"scope:source.typoscript\",\n            \"selector\": \"text.plain\",\n            \"rules\": [\n                {\n                    \"constraint\": \"is_name\",\n                    \"args\": [\"ext_conf_template.txt\", \"ext_typoscript_constants.txt\", \"ext_typoscript_setup.txt\"]\n                },\n                {\n                    \"constraint\": \"path_contains_regex\",\n                    \"args\": [\"^.*/(?:fileadmin|typo3|TypoScript).*/(?:setup|constants)\\\\.txt$\"]\n                }\n            ]\n        },\n        {\n            \"comment\": \"Apache config\",\n            \"syntaxes\": \"scope:source.apacheconf\",\n            \"selector\": \"text.plain | source.nginx\",\n            \"rules\": [\n                {\n                    \"constraint\": \"path_contains_regex\",\n                    \"args\": [\"\\\\b(?i:apache|httpd)\\\\b.*/conf/.*\\\\.conf$\"]\n                },\n                {\n                    \"constraint\": \"contains_regex\",\n                    \"args\": [\"&lt;(?:VirtualHost|Directory|Macro)(?:$|\\\\s)\"]\n                }\n            ]\n        },\n        {\n            \"comment\": \"NGINX config\",\n            \"syntaxes\": \"scope:source.nginx\",\n            \"selector\": \"text.plain | source.apacheconf\",\n            \"rules\": [\n                {\n                    \"constraint\": \"path_contains_regex\",\n                    \"args\": [\"\\\\b(?i:nginx)\\\\b.*/conf/.*\\\\.conf$\"]\n                },\n                {\n                    \"constraint\": \"contains_regex\",\n                    \"args\": [\"^\\\\s*(?:location\\\\s+(?:[~=/a-zA-Z])|(?:fastcgi_param|charset_map)\\\\s)\"]\n                }\n            ]\n        },\n        {\n            // @see https://doc.qt.io/qt-5/qt-conf.html\n            \"comment\": \"Qt's config file\",\n            \"syntaxes\": \"scope:source.ini\",\n            \"selector\": \"- source.ini\",\n            \"rules\": [\n                {\n                    \"constraint\": \"is_name\",\n                    \"args\": [\"qt.conf\"]\n                }\n            ]\n        },\n        {\n            // @see https://doc.qt.io/qtvstools/qtvstools-translation-files.html\n            \"comment\": \"Qt's translation file\",\n            \"syntaxes\": \"scope:text.xml\",\n            \"selector\": \"source.ts\",\n            \"match\": \"all\",\n            \"rules\": [\n                {\n                    \"constraint\": \"is_extension\",\n                    \"args\": [\".ts\"]\n                },\n                {\n                    \"constraint\": \"first_line_contains_regex\",\n                    \"args\": [\"^\\\\s*&lt;\\\\?xml(?:$|\\\\s)\"]\n                }\n            ]\n        },\n        {\n            \"comment\": \"Sublime Text/Merge changelog\",\n            \"syntaxes\": \"scope:text.html.basic\",\n            \"selector\": \"text.plain\",\n            \"match\": \"all\",\n            \"rules\": [\n                {\n                    \"constraint\": \"is_name\",\n                    \"args\": [\"changelog.txt\"]\n                },\n                {\n                    \"constraint\": \"relative_exists\",\n                    \"args\": [\"sublime_text\", \"sublime_text.exe\", \"sublime_merge\", \"sublime_merge.exe\"]\n                }\n            ]\n        },\n        {\n            \"comment\": \"Package Control: Package installation/update messages\",\n            \"syntaxes\": \"scope:text.html.markdown\",\n            \"selector\": \"text.plain\",\n            \"rules\": [\n                {\n                    \"constraint\": \"first_line_contains_regex\",\n                    \"args\": [\"^Package Control Messages(?:$|\\\\s)\"]\n                }\n            ]\n        }\n    ],\n    // Suffixes that will be used to right trim the filename.\n    // By doing that, the file may be then auto set syntax with a trimmed filename.\n    \"default_trim_suffixes\": [\n        \"-dev\",\n        \"-development\",\n        \"-dist\",\n        \"-optional\",\n        \"-prod\",\n        \"-production\",\n        \"-qa\",\n        \"-test\",\n        \".backup\",\n        \".bak\",\n        \".common\",\n        \".default\",\n        \".dev\",\n        \".dist\",\n        \".example\",\n        \".in\",\n        \".inc\",\n        \".include\",\n        \".local\",\n        \".orig\",\n        \".out\",\n        \".qa\",\n        \".sample\",\n        \".shared\",\n        \".temp\",\n        \".test\",\n        \".tmp\",\n        \".tpl\"\n    ],\n\n    ///////////////////\n    // Core Settings //\n    //////////////////////////////////////////////////////////////////////////////////\n    // These settings make this plugin function normally. You shouldn't touch them. //\n    //////////////////////////////////////////////////////////////////////////////////\n\n    \"core_syntax_rules\": [\n        {\n            \"comment\": \"AutoSetSyntax Debug Information\",\n            \"syntaxes\": \"scope:source.python\",\n            \"selector\": \"text.plain\",\n            \"rules\": [\n                {\n                    \"constraint\": \"first_line_contains_regex\",\n                    \"args\": [\"^# === AutoSetSyntax Debug Information === #\"]\n                }\n            ]\n        }\n    ],\n\n    /////////////////////\n    // Magika settings //\n    /////////////////////\n\n    // To use this feature, you have to install the \"magika\" library.\n    // @see https://jfcherng-sublime.github.io/ST-AutoSetSyntax/experimental/dl-based-syntax-detection/#prerequisites\n    \"magika.enabled\": false,\n    \"magika.min_confidence\": 0.85,\n    // To list supported file types, run shell command: `$ magika --list-output-content-types`\n    // @see https://github.com/google/magika/blob/main/docs/supported_content_types_list.md\n    \"magika.syntax_map.appleplist\": [\"scope:text.xml.plist\", \"=xml\"],\n    \"magika.syntax_map.asm\": [\n        // no good way to do this?\n        \"scope:source.asm.x86_64\",\n        \"scope:source.asm.arm\",\n        \"scope:source.rvasm\",\n        \"scope:source.assembly\"\n    ],\n    \"magika.syntax_map.asp\": [\"scope:source.asp\"],\n    \"magika.syntax_map.batch\": [\"scope:source.dosbatch\"],\n    \"magika.syntax_map.c\": [\"scope:source.c++\" /* magika can't distinguish between C and C++ */],\n    \"magika.syntax_map.cs\": [\"scope:source.cs\"],\n    \"magika.syntax_map.css\": [\"scope:source.scss\", \"scope:source.css\"],\n    \"magika.syntax_map.csv\": [\"scope:text.advanced_csv\", \"scope:text.csv\"],\n    \"magika.syntax_map.go\": [\"scope:source.go\"],\n    \"magika.syntax_map.html\": [\"scope:text.html.basic\"],\n    \"magika.syntax_map.ini\": [\"scope:source.ini\"],\n    \"magika.syntax_map.java\": [\"scope:source.java\"],\n    \"magika.syntax_map.javascript\": [\"scope:source.ts\" /* magika can't distinguish between TypeScript and JavaScript */],\n    \"magika.syntax_map.json\": [\"scope:source.json\"],\n    \"magika.syntax_map.latex\": [\"scope:text.tex.latex\"],\n    \"magika.syntax_map.lisp\": [\"scope:source.lisp\"],\n    \"magika.syntax_map.m3u\": [\"scope:text.m3u\"],\n    \"magika.syntax_map.makefile\": [\"scope:source.makefile\"],\n    \"magika.syntax_map.markdown\": [\"scope:text.html.markdown\"],\n    \"magika.syntax_map.mum\": [\"=xml\"],\n    \"magika.syntax_map.pem\": [\"scope:text.pem\"],\n    \"magika.syntax_map.perl\": [\"scope:source.perl\"],\n    \"magika.syntax_map.php\": [\"scope:embedding.php\", \"scope:text.html.php\"],\n    \"magika.syntax_map.postscript\": [\"scope:source.postscript\"],\n    \"magika.syntax_map.powershell\": [\"scope:source.powershell\"],\n    \"magika.syntax_map.python\": [\"scope:source.python\"],\n    \"magika.syntax_map.rdf\": [\"=xml\"],\n    \"magika.syntax_map.rst\": [\"scope:text.restructuredtext\"],\n    \"magika.syntax_map.rtf\": [\"scope:text.rtf\"],\n    \"magika.syntax_map.ruby\": [\"scope:source.ruby\"],\n    \"magika.syntax_map.rust\": [\"scope:source.rust\"],\n    \"magika.syntax_map.scala\": [\"scope:source.scala\"],\n    \"magika.syntax_map.shell\": [\"scope:source.shell.bash\"],\n    \"magika.syntax_map.smali\": [\"scope:source.smali\"],\n    \"magika.syntax_map.sql\": [\"scope:source.sql\"],\n    \"magika.syntax_map.svg\": [\"=xml\"],\n    \"magika.syntax_map.txt\": [\"scope:text.plain\"],\n    \"magika.syntax_map.vba\": [\"scope:source.vbs\"],\n    \"magika.syntax_map.winregistry\": [\"scope:source.reg\"],\n    \"magika.syntax_map.xml\": [\"scope:text.xml\"],\n    \"magika.syntax_map.yaml\": [\"scope:source.yaml\"]\n}\n</code></pre>"},{"location":"configurations/#enable_log","title":"<code>enable_log</code>","text":"Type Default <code>boolean</code> <code>true</code> <p>This setting control whether this plugin creates a dedicated log message panel. Since the panel won't affect other plugins, the default value is <code>true</code>.</p>"},{"location":"configurations/#exec_file_syntax","title":"<code>exec_file_syntax</code>","text":"Type Default <code>string</code> <code>\"Packages/AutoSetSyntax/syntaxes/ExecOutput.sublime-syntax\"</code> <p>This setting controls what syntax a build output should use. The value can be any of the followings:</p> <ul> <li>An empty string, which does nothing.</li> <li>A syntax representation.</li> </ul>"},{"location":"configurations/#new_file_syntax","title":"<code>new_file_syntax</code>","text":"Type Default <code>string</code> <code>\"\"</code> <p>This setting controls what syntax a new file should use. The value can be any of the followings:</p> <ul> <li>An empty string, which does nothing.</li> <li>A syntax representation.</li> </ul>"},{"location":"configurations/#run_on_startup_views","title":"<code>run_on_startup_views</code>","text":"Type Default <code>boolean</code> <code>false</code> <p>This setting controls whether you want to run the <code>auto_set_syntax</code> command on views which exist before the plugin is loaded. If ST starts from cold start, this settings is necessary to set syntax for the just opened file.</p> <p>Info</p> <p>When ST starts up, there may be views that exists before plugins are loaded. Those views won't trigger <code>on_load</code> or <code>on_load_async</code> event listener in plugins. But those views will be put as an argument for the <code>on_init</code> event.</p> <p>For some people, they may even have hundreds of tabs opened. They may not want a plugin to run on all those views when ST starts up.</p>"},{"location":"configurations/#trim_file_size","title":"<code>trim_file_size</code>","text":"Type Default <code>integer</code> <code>20000</code> (about 20KB) <p>Detecting the syntax for the whole file can be resource-consuming if the file is large. This setting approximately controls how many bytes should be used to represent a file.</p>"},{"location":"configurations/#trim_first_line_length","title":"<code>trim_first_line_length</code>","text":"Type Default <code>integer</code> <code>500</code> <p>Detecting the syntax for the whole first line can be resource-consuming if it's a super long one-line file. This setting controls how many characters should be used to represent the first line.</p>"},{"location":"configurations/#trim_suffixes_auto","title":"<code>trim_suffixes_auto</code>","text":"Type Default <code>boolean</code> <code>false</code> <p>Apart from <code>trim_suffixes</code>, also try to remove every sub-extensions when finding a syntax match. For example, for the file <code>foo.json.ext1.ext2.ext3</code>, this setting enables trying the following file names as well.</p> <ol> <li><code>foo.json.ext1.ext2</code> (no matching syntax)</li> <li><code>foo.json.ext1</code> (no matching syntax)</li> <li><code>foo.json</code> (matches <code>JSON</code> syntax)</li> <li>If there is no <code>JSON</code> syntax, then <code>foo</code> will be tried.</li> </ol>"},{"location":"configurations/#default_syntax_rules","title":"<code>default_syntax_rules</code>","text":"<p>Syntax rules are the key part of AutoSetSyntax.</p> <p>Structure of syntax rules</p> <pre><code>\"default_syntax_rules\": [\n    // syntax rule\n    {\n        \"comment\": \"...\",\n        \"syntaxes\": \"...\",\n        \"selector\": \"...\",\n        \"on_events\": null,\n        // match rule\n        \"match\": \"...\",\n        \"rules\": [\n            // constraint rule\n            {\n                \"constraint\": \"...\",\n                \"args\": [\"...\"],\n            },\n            // match rule\n            {\n                \"match\": \"...\",\n                \"rules\": [\n                    // can be recursive...\n                ],\n            },\n        ],\n    },\n    // more syntax rules...\n],\n</code></pre> Syntax ruleMatch ruleConstraint rule <p>A syntax rule contains <code>comment</code>, <code>syntaxes</code>, <code>selector</code>, <code>on_events</code> and an expanded top-level match rule.</p> <p>Arguments</p> commentsyntaxesselectoron_events <p>This is just a optional string which explains what this syntax rule is for. It may make your debugging easier.</p> <p><code>syntaxes</code> is a list of syntax representation. If there is only one syntax, you can simply un-list it into a string. If the top-level <code>match</code> is satisfied by <code>rules</code>, the first usable syntax in <code>syntaxes</code> will be assigned to the view.</p> <p>Limit this syntax rule only works when the <code>selector</code> matches the top scope. Learn more about selectors from ST official docs.</p> <p><code>on_events</code> is a list of event names or (by default) <code>null</code>. It's used to restrict this syntax rule only works if this run is triggered by some certain events. If it's <code>null</code>, then there is no restriction.</p> <p>Failure</p> <p>If you use an empty list, then this syntax rule will never be evaluated.</p> <p>Available Events</p> Event Name Meaning <code>\"command\"</code> This run is triggered by the <code>auto_set_syntax</code> command. <code>\"init\"</code> This run is triggered by startup views. <code>\"load\"</code> This run is triggered because a file gets loaded. <code>\"modify\"</code> This run is triggered because of a buffer modification. <code>\"new\"</code> This run is triggered because of a newly created window. <code>\"reload\"</code> This run is triggered because a file has been reloaded. <code>\"revert\"</code> This run is triggered because of the <code>revert</code> command. <code>\"save\"</code> This run is triggered because of the buffer gets saved. <code>\"untransientize\"</code> This run is triggered because a transient view becomes a normal view. <p>A match rule may recursively contain any amount of match rule and constraint rule so you can build complex rules basing on your needs.</p> <p>Arguments</p> <p>The default value of the <code>match</code> is <code>\"any\"</code>, which tests whether there is any <code>rules</code> satisfied.</p> <p>Tip</p> <p>You may learn more about built-in <code>match</code>es here.</p> <p>A constraint rule is the lowest-level rule, which tests an actual constraint.</p> <p>Tip</p> <p>You may learn more about built-in <code>constraint</code>s here.</p> <p>Warning</p> <p>It's not recommended to directly override <code>default_syntax_rules</code> because that stops you from possible future updates for <code>default_syntax_rules</code>. The recommended way is putting your syntax rules in <code>user_syntax_rules</code>. And put project-specific syntax rules in <code>project_syntax_rules</code> in project settings.</p>"},{"location":"configurations/#default_trim_suffixes","title":"<code>default_trim_suffixes</code>","text":"Type Default <code>string[]</code> <code>[ \".dist\", \".local\", /* many other suffixes */ ]</code> <p>These suffixes are considered unimportant in a file name. AutoSetSyntax will try to remove them from the file name and maybe a syntax will be found for a trimmed file name.</p> <p>Warning</p> <p>It's not recommended to directly override <code>default_trim_suffixes</code> because that stops you from possible future updates for <code>default_trim_suffixes</code>. The recommended way is putting your suffixes in <code>user_trim_suffixes</code>. And put project-specific suffixes in <code>project_trim_suffixes</code> in project settings.</p>"},{"location":"configurations/#terms-and-explanations","title":"Terms and Explanations","text":""},{"location":"configurations/#syntax-representations","title":"Syntax Representations","text":"<p>When we talk about setting \"syntax\" in plugin settings, there are three ways you can use.</p> <p>Example</p> <p>Let's take the built-in <code>JavaScript</code> syntax as an example.</p> By scopeBy nameBy pathSummary <p>You can use <code>\"scope:TOP_SCOPE\"</code> to represents a syntax.</p> <p>For example, the top scope of <code>JavaScript</code> is <code>source.js</code>. Thus, you can use <code>\"scope:source.js\"</code>.</p> <p>Tip</p> <p>To show the scope at the caret position, press Ctrl+Alt+Shift+P.</p> <p>You can use the syntax name to represent a syntax.</p> <p>For example, it's <code>JavaScript</code> for the <code>JavaScript</code> syntax. Thus, you can use <code>\"JavaScript\"</code>.</p> <p>Info</p> <p>The syntax name is shown in the bottom-right corner of ST.</p> <p>Warning</p> <p>If you manually type a syntax name, note that it's case-sensitive.</p> <p>You can use a partial path (or a full one if you prefer) of a syntax to represent it.</p> <p>For example, the full path for the <code>JavaScript</code> syntax is <code>Packages/JavaScript/JavaScript.sublime-syntax</code>. Theoretically, you may use any substring of the full path to represent it. But if your partial path is not unique, it may represent other syntaxes as well and causes unwanted behavior. Thus, if you want to go the \"by path\" way, I recommend using <code>\"/JavaScript/JavaScript.\"</code>.</p> <p>All of followings represent the same syntax, <code>JavaScript</code>.</p> <ul> <li>Top scope: <code>\"scope:source.js\"</code></li> <li>Name: <code>\"JavaScript\"</code></li> <li>Partial path: <code>\"/JavaScript/JavaScript.\"</code></li> <li>Full path: <code>\"Packages/JavaScript/JavaScript.sublime-syntax\"</code></li> </ul>"},{"location":"configurations/#project-settings","title":"Project Settings","text":"<p>To edit project settings, go to <code>Project</code> \u00bb <code>Edit Project</code>.</p> <p>Example</p> <pre><code>{\n    \"folders\": [\n        // ...\n    ],\n    \"settings\": {\n        \"AutoSetSyntax\": {\n            // use JavaScript as the new file syntax\n            \"new_file_syntax\": \"scope:source.js\",\n            \"project_syntax_rules\": [\n                // specific rules only for this project\n            ],\n            \"project_trim_suffixes\": [\n                // specific trimmed suffixes only for this project\n            ],\n            // maybe other plugin settings...\n        },\n    },\n}\n</code></pre> <p>You can override any plugin setting in project settings. But most likely, you are just interested in <code>new_file_syntax</code>, <code>project_syntax_rules</code> and probably <code>project_trim_suffixes</code>.</p>"},{"location":"configurations/#appendix","title":"Appendix","text":""},{"location":"configurations/#built-in-matches","title":"Built-in <code>Match</code>es","text":""},{"location":"configurations/#all","title":"<code>all</code>","text":"<p>Example</p> <pre><code>{\n    \"match\": \"all\",\n    \"rules\": [ /* some match rules or constraint rules */ ],\n}\n</code></pre> <p>Test whether all rules in <code>rules</code> are satisfied.</p>"},{"location":"configurations/#any","title":"<code>any</code>","text":"<p>Example</p> <pre><code>{\n    \"match\": \"any\",\n    \"rules\": [ /* some match rules or constraint rules */ ],\n}\n</code></pre> <p>Test whether there is any rule in <code>rules</code> satisfied.</p>"},{"location":"configurations/#ratio","title":"<code>ratio</code>","text":"<p>Example</p> <pre><code>{\n    \"match\": \"ratio\",\n    \"rules\": [ /* some match rules or constraint rules */ ],\n    \"args\": [2, 3],\n}\n</code></pre> <p>Test whether at least \\(\\frac{2}{3}\\) of rules in <code>rules</code> are satisfied.</p>"},{"location":"configurations/#some","title":"<code>some</code>","text":"<p>Example</p> <pre><code>{\n    \"match\": \"some\",\n    \"rules\": [ /* some match rules or constraint rules */ ],\n    \"args\": [4],\n}\n</code></pre> <p>Test whether at least 4 rules in <code>rules</code> are satisfied.</p>"},{"location":"configurations/#built-in-constraints","title":"Built-in <code>Constraint</code>s","text":"<p>Tip: Directory Separator</p> <p>For path-related constraints, the directory separator is always <code>/</code> no matter what OS you are on. This should simplify the rule definitions.</p> <p>Tip: Inverted Result</p> <p>For all constraint rules, you may set <code>inverted</code> to <code>true</code> to invert the test result.</p> <pre><code>{\n    // This means testing the file does NOT contains `string_a` or `string_b`.\n    \"constraint\": \"contains\",\n    \"args\": [\"string_a\", \"string_b\"],\n    \"inverted\": true,\n}\n</code></pre> <p>Warning</p> <p>Under certain circumstances, the test result will not be inverted. For example, if the <code>is_size</code> constraint tests a unsaved buffer, the result will always be <code>false</code> no matter <code>inverted</code> is <code>true</code> or <code>false</code>, because a unsaved buffer has no file size.</p>"},{"location":"configurations/#contains","title":"<code>contains</code>","text":"<p>Example</p> <pre><code>{\n    \"constraint\": \"contains\",\n    \"args\": [\"string_a\", \"string_b\"],\n    \"kwargs\": { \"threshold\": 2 },\n}\n</code></pre> <p>Test whether the file contains string literals <code>string_a</code> or <code>string_b</code>. At least <code>2</code> occurrences should be found.</p>"},{"location":"configurations/#contains_regex","title":"<code>contains_regex</code>","text":"<p>Example</p> <pre><code>{\n    \"constraint\": \"contains_regex\",\n    \"args\": [\"string_[ab]\", \"^import\\\\s\"],\n    \"kwargs\": {\n        \"regex_flags\": [\"MULTILINE\"],\n        \"threshold\": 2,\n    },\n}\n</code></pre> <p>Test whether the file contains regexes <code>string_[ab]</code> or <code>^import\\s</code>. At least <code>2</code> occurrences should be found.</p>"},{"location":"configurations/#first_line_contains","title":"<code>first_line_contains</code>","text":"<p>Example</p> <pre><code>{\n    \"constraint\": \"first_line_contains\",\n    \"args\": [\"string_a\", \"string_b\"],\n}\n</code></pre> <p>Test whether the first line contains string literals <code>string_a</code> or <code>string_b</code>.</p>"},{"location":"configurations/#first_line_contains_regex","title":"<code>first_line_contains_regex</code>","text":"<p>Example</p> <pre><code>{\n    \"constraint\": \"first_line_contains_regex\",\n    \"args\": [\"string_[ab]\", \"^import\\\\s\"],\n    \"kwargs\": { \"regex_flags\": [\"MULTILINE\"] },\n}\n</code></pre> <p>Test whether the first line contains regexes <code>string_[ab]</code> or <code>^import\\s</code>.</p>"},{"location":"configurations/#relative_exists","title":"<code>relative_exists</code>","text":"<p>Example</p> <pre><code>{\n    \"constraint\": \"relative_exists\",\n    \"args\": [\"foo\", \"bar/\"],\n    \"kwargs\": {\"match\": \"all\"},\n}\n</code></pre> <p>Test whether both file <code>foo</code> and directory <code>bar/</code> exist relatively to the file.</p>"},{"location":"configurations/#is_arch","title":"<code>is_arch</code>","text":"<p>Example</p> <pre><code>{\n    \"constraint\": \"is_arch\",\n    \"args\": [\"x32\", \"arm64\"],\n}\n</code></pre> <p>Test whether the system arch is <code>x32</code> or <code>arm64</code>.</p> <p>Info</p> <p>Available platforms are: <code>x32</code>, <code>x64</code>, and <code>arm64</code>.</p>"},{"location":"configurations/#is_extension","title":"<code>is_extension</code>","text":"<p>Example</p> <pre><code>{\n    \"constraint\": \"is_extension\",\n    \"args\": [\".rb\", \".rake\"],\n    \"kwargs\": {\"case_insensitive\": false},\n}\n</code></pre> <p>Test whether the file extension is <code>.rb</code> or <code>.rake</code>.</p> <p>Info</p> <p>If <code>case_insensitive</code> is not provided, it will be <code>true</code> on Windows but <code>false</code> on other OSes.</p>"},{"location":"configurations/#is_hidden_syntax","title":"<code>is_hidden_syntax</code>","text":"<p>Example</p> <pre><code>{\n    \"constraint\": \"is_hidden_syntax\",\n}\n</code></pre> <p>Test whether the current syntax is hidden.</p> <p>Info</p> <p>A hidden syntax is usually not for providing syntax highlighting. For example, the \"A File Icon\" plugin uses hidden syntaxes just to show dedicated icons.</p>"},{"location":"configurations/#is_in_git_repo","title":"<code>is_in_git_repo</code>","text":"<p>Example</p> <pre><code>{\n    \"constraint\": \"is_in_git_repo\",\n}\n</code></pre> <p>Test whether the file is in a git repository.</p>"},{"location":"configurations/#is_in_hg_repo","title":"<code>is_in_hg_repo</code>","text":"<p>Example</p> <pre><code>{\n    \"constraint\": \"is_in_hg_repo\",\n}\n</code></pre> <p>Test whether the file is in a Mercurial repository.</p>"},{"location":"configurations/#is_in_python_django_project","title":"<code>is_in_python_django_project</code>","text":"<p>Example</p> <pre><code>{\n    \"constraint\": \"is_in_python_django_project\",\n}\n</code></pre> <p>Test whether the file is in a (Python) Django project.</p>"},{"location":"configurations/#is_in_ruby_on_rails_project","title":"<code>is_in_ruby_on_rails_project</code>","text":"<p>Example</p> <pre><code>{\n    \"constraint\": \"is_in_ruby_on_rails_project\",\n}\n</code></pre> <p>Test whether the file is in a Ruby on Rails project.</p>"},{"location":"configurations/#is_in_svn_repo","title":"<code>is_in_svn_repo</code>","text":"<p>Example</p> <pre><code>{\n    \"constraint\": \"is_in_svn_repo\",\n}\n</code></pre> <p>Test whether the file is in a SVN repository.</p>"},{"location":"configurations/#is_interpreter","title":"<code>is_interpreter</code>","text":"<p>Example</p> <pre><code>{\n    \"constraint\": \"is_interpreter\",\n    \"args\": [\"python\", \"cpython\"],\n    \"kwargs\": {\"loosy_version\": true},\n}\n</code></pre> <p>Test any of the followings</p> <ul> <li>the interpreter in shebang</li> <li>the <code>syntax</code> in the VIM's syntax line</li> </ul> <p>is <code>python</code>, <code>pypy</code>, <code>python3</code>, <code>python3.8</code>, etc.</p>"},{"location":"configurations/#is_line_count","title":"<code>is_line_count</code>","text":"<p>Example</p> <pre><code>{\n    \"constraint\": \"is_line_count\",\n    \"args\": [\"&gt;\", 500],\n}\n</code></pre> <p>Test whether the file has more than 500 lines.</p> <p>Info</p> <p>Available comparators are: <code>&lt;</code>, <code>&lt;=</code>, <code>==</code>, <code>&gt;=</code>, <code>&gt;</code> and <code>!=</code>.</p>"},{"location":"configurations/#is_magika_enabled","title":"<code>is_magika_enabled</code>","text":"<p>Example</p> <pre><code>{\n    \"constraint\": \"is_magika_enabled\",\n}\n</code></pre> <p>Test whether the <code>magika</code> is enabled.</p>"},{"location":"configurations/#is_name","title":"<code>is_name</code>","text":"<p>Example</p> <pre><code>{\n    \"constraint\": \"is_name\",\n    \"args\": [\"foo\", \"bar\"],\n    \"kwargs\": {\"case_insensitive\": false},\n}\n</code></pre> <p>Test whether the file name is <code>foo</code> or <code>bar</code>.</p> <p>Info</p> <p>If <code>case_insensitive</code> is not provided, it will be <code>true</code> on Windows but <code>false</code> on other OSes.</p>"},{"location":"configurations/#is_platform","title":"<code>is_platform</code>","text":"<p>Example</p> <pre><code>{\n    \"constraint\": \"is_platform\",\n    \"args\": [\"linux\", \"windows\"],\n}\n</code></pre> <p>Test whether the system platform is <code>Linux</code> or <code>Windows</code>.</p> <p>Info</p> <p>Available platforms are: <code>linux</code>, <code>osx</code>, and <code>windows</code>.</p>"},{"location":"configurations/#is_platform_arch","title":"<code>is_platform_arch</code>","text":"<p>Example</p> <pre><code>{\n    \"constraint\": \"is_platform_arch\",\n    \"args\": [\"linux_x64\", \"windows_x32\", \"osx_arm64\"],\n}\n</code></pre> <p>Test whether the system platform and arch is <code>Linux 64-bit</code>, <code>Windows 32-bit</code> or <code>Apple M1</code>.</p> <p>Info</p> <p>Available <code>platform_arch</code> are combinations of (<code>linux</code>, <code>osx</code>, <code>windows</code>) and (<code>x32</code>, <code>x64</code>, <code>arm64</code>) using a <code>_</code> as the delimiter.</p>"},{"location":"configurations/#is_rails_file","title":"<code>is_rails_file</code>","text":"<p>Example</p> <pre><code>{\n    \"constraint\": \"is_rails_file\",\n}\n</code></pre> <p>Test whether the file is a <code>Ruby on Rails</code> file.</p>"},{"location":"configurations/#is_size","title":"<code>is_size</code>","text":"<p>Example</p> <pre><code>{\n    \"constraint\": \"is_size\",\n    \"args\": [\"&gt;\", 5000],\n}\n</code></pre> <p>Test whether the file size is greater than <code>5000</code> bytes (about <code>5</code> KB).</p> <p>Info</p> <p>Available comparators are: <code>&lt;</code>, <code>&lt;=</code>, <code>==</code>, <code>&gt;=</code>, <code>&gt;</code> and <code>!=</code>.</p>"},{"location":"configurations/#is_syntax","title":"<code>is_syntax</code>","text":"<p>Example</p> <pre><code>{\n    \"constraint\": \"is_syntax\",\n    \"args\": [\"scope:source.python\", \"JavaScript\", \"/JSON.\"]\n}\n</code></pre> <p>Test whether the current syntax is in the given syntax list. See syntax representation for more informations.</p>"},{"location":"configurations/#name_contains","title":"<code>name_contains</code>","text":"<p>Example</p> <pre><code>{\n    \"constraint\": \"name_contains\",\n    \"args\": [\"foo\", \"bar\"],\n}\n</code></pre> <p>Test whether the file name contains <code>foo</code> or <code>bar</code>.</p>"},{"location":"configurations/#name_contains_regex","title":"<code>name_contains_regex</code>","text":"<p>Example</p> <pre><code>{\n    \"constraint\": \"name_contains_regex\",\n    \"args\": [\"^foo\", \"bar$\"],\n    \"kwargs\": { \"regex_flags\": [\"MULTILINE\"] },\n}\n</code></pre> <p>Test whether the file name contains regexes <code>^foo</code> or <code>bar$</code>.</p>"},{"location":"configurations/#path_contains","title":"<code>path_contains</code>","text":"<p>Example</p> <pre><code>{\n    \"constraint\": \"path_contains\",\n    \"args\": [\"foo\", \"bar\"],\n}\n</code></pre> <p>Test whether the file path contains <code>foo</code> or <code>bar</code>.</p>"},{"location":"configurations/#path_contains_regex","title":"<code>path_contains_regex</code>","text":"<p>Example</p> <pre><code>{\n    \"constraint\": \"path_contains_regex\",\n    \"args\": [\"/conf/.*\\\\.conf$\", \"/assets/.*\\\\.js$\"],\n    \"kwargs\": { \"regex_flags\": [\"MULTILINE\"] },\n}\n</code></pre> <p>Test whether the file path contains regexes <code>/conf/.*\\.conf$</code> or <code>/assets/.*\\.js$</code>.</p>"},{"location":"configurations/#selector_matches","title":"<code>selector_matches</code>","text":"<p>Example</p> <pre><code>{\n    \"constraint\": \"selector_matches\",\n    \"args\": [\"text.plain | source.env\"],\n}\n</code></pre> <p>Test whether the any of selectors matches the base scope of the current syntax.</p>"},{"location":"configurations/#regular-expression-flags","title":"Regular Expression Flags","text":"<p>Some <code>constraint</code>s allow you to use (Python) regexes in <code>args</code>. There are two ways to use regex flags on those regexes.</p> Inline Regex Flags<code>regex_flags</code> in <code>kwargs</code> <p>Example</p> <pre><code>{\n    \"constraint\": \"contains_regex\",\n    \"args\": [\"(?i:foo)_bar\"],\n}\n</code></pre> <p>This will matches <code>FoO_bar</code>.</p> <p>Info</p> <p>If you want to learn more, you may read inline regex flags.</p> <p>By default, <code>[\"MULTILINE\"]</code> is used for convenience.</p> <p>Warning</p> <p>Note that those <code>regex_flags</code> will be applied to ALL regexes.</p> <p>Example</p> <pre><code>{\n    \"constraint\": \"contains_regex\",\n    \"args\": [\"string_[ab]\", \"^import\\\\s\"],\n    \"kwargs\": { \"regex_flags\": [\"IGNORECASE\", \"MULTILINE\"] },\n}\n</code></pre> <p>This will make <code>string_[ab]</code> and <code>^import\\s</code> matching case-insensitive.</p> <p>Common Flags</p> Flag Meaning <code>\"IGNORECASE\"</code> Ignore case (case-insensitive). <code>\"I\"</code> An alias of <code>\"IGNORECASE\"</code>. <code>\"MULTILINE\"</code> Make <code>^</code> matches at line beginnings and <code>$</code> matches at line endings. <code>\"M\"</code> An alias of <code>\"MULTILINE\"</code>. <code>\"DOTALL\"</code> Make <code>.</code> matches any character, including a newline. <code>\"S\"</code> An alias of <code>\"DOTALL\"</code>. <p>If you want to learn more, you may read Python's docs about the <code>re</code> module.</p>"},{"location":"debug/","title":"Debug","text":""},{"location":"debug/#log-panel","title":"Log Panel","text":"<p>Log messages are printed in the dedicated log panel. There are two ways to open the log panel:</p> <ol> <li>Right click on the bottom-left corner of ST and then select <code>Output: AutoSetSyntax</code>.    Or, run <code>AutoSetSyntax: Show Log Panel</code> from the command palette<sup>1</sup>.</li> <li>(Re-)save your plugin/project settings.</li> <li>See whether your rules are in those dropped rules.    In that case, it's likely that your rules have wrong name or args.</li> </ol> <p>Note</p> <p>Each window has its own log panel. They may have different outputs due to project settings.</p>"},{"location":"debug/#debug-information","title":"Debug Information","text":"<p>Just run <code>AutoSetSyntax: Debug Information</code> from the command palette<sup>1</sup>.</p> <p>Tip</p> <p>The debug information is designed to be Python-compatible, thus you can format it with a Python formatter like Ruff.</p> <ol> <li> <p>Command palette: Ctrl+P for Windows/Linux. Cmd+P for macOS.\u00a0\u21a9\u21a9</p> </li> </ol>"},{"location":"use-cases/","title":"Use Cases","text":""},{"location":"use-cases/#default-syntax-for-new-files","title":"Default syntax for new files","text":"<p>Sometimes, mostly in a project, you just want to have this functionality.</p> <p>For example, you may want a new file<sup>1</sup> to be auto set to <code>JavaScript</code>, <code>React</code> or <code>Vue</code> syntax in a frontend web project.</p> <p>Info</p> <p>Check the <code>new_file_syntax</code> plugin setting.</p>"},{"location":"use-cases/#detecting-the-syntax-when-modifying-the-file","title":"Detecting the syntax when modifying the file","text":"<p>This method works only under following circumstances:</p> <ul> <li>The view's syntax is currently <code>Plain Text</code>.</li> <li>And the user is modifying either the first line or the last few chars of the file.</li> </ul> <p>A typical use case is that if you create a new file and type <code>&lt;?php</code>, the file will automatically be set to <code>PHP</code> syntax because the <code>PHP</code> syntax claims it handles files whose first line is <code>&lt;?php</code>.</p> <p>Tip</p> <p>This also works with user-defined rule so when you copy and paste codes from a random website into ST, your defined rule may help you set the syntax too, because you are very likely modifying either the first line or the last few characters.</p>"},{"location":"use-cases/#trimming-unimportant-suffixes-from-the-filename","title":"Trimming unimportant suffixes from the filename","text":"<p>When a file is loaded, this plugin deduces the syntax for your \"<code>Plain Text</code>\" file by its filename.</p> <p>For example, you may have a configuration file whose name is <code>parameters.yml.dist</code>. ST can't find a syntax for a <code>.dist</code> extension so your <code>parameters.yml.dist</code> remains <code>Plain Text</code>.</p> <p>However, this plugin will try to remove unimportant suffixes from the filename. By default, <code>.dist</code> is in the <code>trim_suffixes</code> list, so this plugin will remove it and try whether it can find a syntax for <code>parameters.yml</code>, and yes, it deserves the <code>YAML</code> syntax.</p> <p>Info</p> <p>Check <code>default_trim_suffixes</code>, <code>user_trim_suffixes</code> and <code>project_trim_suffixes</code> plugin settings.</p>"},{"location":"use-cases/#assigning-syntax-for-sublime-text-syntax-test-files","title":"Assigning syntax for Sublime Text syntax test files","text":"<p>Sometimes, the syntax test file just has no file extension so a syntax won't be assigned by Sublime Text. For example, for the built-in <code>Git Config.sublime-syntax</code>, its test file is named as <code>syntax_test_git_config</code>. When you open it, AutoSetSyntax sets the syntax basing on its first line: <code># SYNTAX TEST \"Git Config.sublime-syntax\"</code>.</p>"},{"location":"use-cases/#assigning-syntax-by-the-first-line","title":"Assigning syntax by the first line","text":"<p>If a file whose name has no <code>.</code> and its first line satisfies any of following conditions,</p> <ul> <li>Has a shebang.</li> <li>Has a VIM's syntax line.</li> </ul> <p>this plugin prefers the syntax set by it whenever possible.</p> <p>This means to fix some corner cases such as a file whose name is <code>cs</code> but has a Python shebang. It will be set to <code>C#</code> by ST due to its filename, but the shebang should be precise.</p> <p>We don't want to overkill that setting a <code>.erb</code> (<code>HTML (Rails)</code>) template file back to <code>HTML</code> syntax due to its first line.</p> <p>Info</p> <ul> <li>ST prefers assigning the syntax basing on the file name (extension) than the first line.</li> <li>If the file name is exactly an extension of a syntax, for example, the file name is <code>js</code>,   ST will use that syntax (which can be wrong). This is how ST detects files who have no extension   like <code>Makefile</code>.</li> </ul>"},{"location":"use-cases/#user-defined-rules","title":"User-defined rules","text":"<ul> <li>For average users, read \"Configurations\" for more details to create your own rules.</li> <li>For advanced users, you may read \"Advanced Topics\" for creating custom <code>Match</code> or <code>Constraint</code> implementations.</li> </ul>"},{"location":"use-cases/#deep-learning-based-syntax-detection","title":"Deep learning based syntax detection","text":"<p>This can be useful for files which have no extension or irregular extensions, or when pasting codes into a new buffer. Check Deep Learning based Syntax Detection.</p>"},{"location":"use-cases/#dim-out-build-status-from-the-build-output-panel","title":"Dim out build status from the build output panel","text":"<p>There is a bundled syntax, which dims out unimportant information such as <code>[Finished in 89ms]</code>. When AutoSetSyntax detects there is a build running, it sets the syntax of the output panel to the bundled one unless the output panel has its own syntax already. Hopefully, this makes the output less distractive.</p> <p>If you want to customize the color of unimportant information, their scopes are <code>comment.status.autosetsyntax.exec</code>.</p> <ol> <li> <p>Create a new file: Ctrl+N for Windows/Linux. Cmd+N for macOS.\u00a0\u21a9</p> </li> </ol>"},{"location":"advanced-topics/custom-constraint/","title":"Custom Constraint","text":""},{"location":"advanced-topics/custom-constraint/#custom-constraint-implementation","title":"Custom <code>Constraint</code> Implementation","text":"<p>Tip</p> <p>You may check how built-in <code>Constraint</code>s are implemented here.</p> <p>You may create your own custom <code>Constraint</code> implementation by following steps.</p> <ol> <li>Run <code>AutoSetSyntax: Create New Constraint</code> from the command palette<sup>1</sup>.</li> <li> <p>It will create a template like</p> <p>Example</p> <pre><code>from __future__ import annotations\n\nfrom AutoSetSyntax.plugin import AbstractConstraint, ViewSnapshot\n\n\nclass MyOwnConstraint(AbstractConstraint):\n    \"\"\"Your custom `Constraint` must inherit `AbstractConstraint` and implement the `test` method.\"\"\"\n\n    def is_droppable(self) -&gt; bool:\n        # Optionally, you can implement `is_droppable` to indicate that this object\n        # can be dropped under certain circumstances by the optimizer.\n        return False\n\n    def test(self, view_snapshot: ViewSnapshot) -&gt; bool:\n        # Your job is to implement this function, at least.\n        # This function tests the `view_snapshot`.\n        return False\n</code></pre> </li> <li> <p>Decide the constraint name of your <code>Constraint</code>.</p> <p>Say, if your class name is <code>MyOwnConstraint</code>, the constraint name is decided by</p> <ol> <li>Remove <code>Constraint</code> suffix from the class name. (<code>MyOwnConstraint</code> \u00bb <code>MyOwn</code>)</li> <li>Convert it into snake case. (<code>MyOwn</code> \u00bb <code>my_own</code>)</li> </ol> <p>That is, you can use it via <code>\"constraint\": \"my_own\"</code> in a constraint rule.</p> </li> <li> <p>At least, implement the <code>test</code> method.</p> </li> <li> <p>Save your implementation in <code>Packages/AutoSetSyntax-Custom/constraints/</code>.     Conventionally, the file name used is the constraint name, <code>my_own.py</code>.</p> </li> <li> <p>Restart ST and check whether your implementation is loaded via Debug Information.</p> </li> </ol> <ol> <li> <p>Command palette: Ctrl+P for Windows/Linux. Cmd+P for macOS.\u00a0\u21a9</p> </li> </ol>"},{"location":"advanced-topics/custom-match/","title":"Custom Match","text":""},{"location":"advanced-topics/custom-match/#custom-match-implementation","title":"Custom <code>Match</code> Implementation","text":"<p>Tip</p> <p>You may check how built-in <code>Match</code>es are implemented here.</p> <p>You may create your own custom <code>Match</code> implementation by following steps.</p> <ol> <li>Run <code>AutoSetSyntax: Create New Match</code> from the command palette<sup>1</sup>.</li> <li> <p>It will create a template like</p> <p>Example</p> <pre><code>from __future__ import annotations\n\nfrom AutoSetSyntax.plugin import AbstractMatch, MatchableRule, ViewSnapshot\n\n\nclass MyOwnMatch(AbstractMatch):\n    \"\"\"Your custom `Match` must inherit `AbstractMatch` and implement the `test` method.\"\"\"\n\n    def is_droppable(self, rules: tuple[MatchableRule, ...]) -&gt; bool:\n        # Optionally, you can implement `is_droppable` to indicate that this object\n        # can be dropped under certain circumstances by the optimizer.\n        return False\n\n    def test(self, view_snapshot: ViewSnapshot, rules: tuple[MatchableRule, ...]) -&gt; bool:\n        # Your job is to implement this function, at least.\n        # This function tests `rules` (mix of `ConstraintRule`s and `MatchRule`s).\n        return False\n</code></pre> </li> <li> <p>Decide the match name of your <code>Match</code>.</p> <p>Say, if your class name is <code>MyOwnMatch</code>, the match name is decided by</p> <ol> <li>Remove <code>Match</code> suffix from the class name. (<code>MyOwnMatch</code> \u00bb <code>MyOwn</code>)</li> <li>Convert it into snake case. (<code>MyOwn</code> \u00bb <code>my_own</code>)</li> </ol> <p>That is, you can use it via <code>\"match\": \"my_own\"</code> in a match rule.</p> </li> <li> <p>At least, implement the <code>test</code> method.</p> </li> <li> <p>Save your implementation in <code>Packages/AutoSetSyntax-Custom/matches/</code>.     Conventionally, the file name used is the match name, <code>my_own.py</code>.</p> </li> <li> <p>Restart ST and check whether your implementation is loaded via Debug Information.</p> </li> </ol> <ol> <li> <p>Command palette: Ctrl+P for Windows/Linux. Cmd+P for macOS.\u00a0\u21a9</p> </li> </ol>"},{"location":"advanced-topics/how-plugin-works/","title":"How Plugin Works","text":"<p>When AutoSetSyntax is loaded or plugin/project settings updated, AutoSetSyntax runs following procedures.</p> <ol> <li>Generate merged settings.</li> <li>Find <code>Match</code> / <code>Constraint</code> implementations.</li> <li>Compile merged settings into rule objects.</li> <li>Optimize compiled rule objects.</li> </ol> <p>AutoSetSyntax has some event listeners (see <code>listener.py</code>) which tests syntax rules by calling <code>SyntaxRuleCollection.test(...)</code> under certain circumstances.</p> <p>Before <code>SyntaxRuleCollection.test(...)</code> runs, <code>ViewSnapshot</code> is a snapshot of the view at the moment and that snapshot will be used in this whole run to prevent from calling expensive APIs multiple times.</p> <p>When <code>SyntaxRuleCollection.test(...)</code> runs, syntax rules in it are tested in the order as they are defined in settings. If there is a syntax rule matches, the test ends and the syntax of the view will be set to the one defined in the syntax rule.</p>"},{"location":"advanced-topics/how-plugin-works/#merge-settings","title":"Merge Settings","text":"<p>Merged settings are per-window. They are generated by merging plugin settings with project settings.</p> <ul> <li>If the user updates plugin settings,   merged settings for all existing windows should be re-generated.</li> <li>If the user updates project settings,   only settings of the corresponding project window needs to be re-generated.</li> </ul> <p>Info</p> <p>Settings precedence: <code>Project settings</code> &gt; <code>User settings</code> &gt; <code>Default settings</code></p>"},{"location":"advanced-topics/how-plugin-works/#find-implementations","title":"Find Implementations","text":"<ul> <li>Built-in implementations are hard-coded. (see <code>plugin/rules/constraints/__init__.py</code>)</li> <li>Custom implementations are loaded from specific folders if any. (see <code>_load_custom_implementations()</code>)</li> </ul>"},{"location":"advanced-topics/how-plugin-works/#rule-compilation","title":"Rule Compilation","text":"<p>This step compiles merged settings into a <code>SyntaxRuleCollection</code> object. All necessary objects are created in this step (and re-used in the future) rather than when rules are tested every time.</p>"},{"location":"advanced-topics/how-plugin-works/#rule-optimization","title":"Rule Optimization","text":"<p>This step optimizes the compiled <code>SyntaxRuleCollection</code> object by calling its <code>optimize</code> method.</p> <p>Currently, it drops invalid rules (like object with invalid args) and unreachable rules. <code>is_droppable</code> functions in <code>Match</code>es and <code>Constraint</code>s are evaluated to decide whether it can be dropped or not.</p>"},{"location":"experimental/dl-based-syntax-detection/","title":"Deep Learning Based Syntax Detection","text":"<p>This feature is experimental and disabled by default.</p>"},{"location":"experimental/dl-based-syntax-detection/#overview","title":"Overview","text":"<p>It uses Google's Magika library to detect the file syntax.</p>"},{"location":"experimental/dl-based-syntax-detection/#prerequisites","title":"Prerequisites","text":"<ol> <li>If you are using MacOS, MacOS 11 (Big Sur) or later is required.     You can run <code>$ sw_vers</code> in terminal to check the OS version.</li> <li> <p>If you are using Linux, GLIBC 2.27 or later is required.     You can run <code>$ ldd --version</code> in terminal to check the GLIBC version on your system.</p> </li> <li> <p>Install dependencies.</p> <p>Run <code>AutoSetSyntax: Download Dependencies</code> from the command palette. The dependencies can be up to ~40 MB in size, so it may take a while. When it's done, there will be a popup dialogue.</p> <p>If your machine has no access to GitHub...</p> <p>You can download the dependencies on GitHub basing on your machine's OS and CPU architecture by any means. If you don't know which one to download, run the following command in Sublime Text's console:</p> <pre><code>import AutoSetSyntax; AutoSetSyntax.plugin.constants.PLUGIN_PY_LIBS_URL\n</code></pre> <p>Decompress the downloaded ZIP file into <code>Package Storage/AutoSetSyntax/</code> so that the directory structure looks like the following:</p> <pre><code>Package Storage\n\u2514\u2500 AutoSetSyntax\n   \u2514\u2500 libs-py38@linux_x64\n      \u251c\u2500\u2500 click\n      \u251c\u2500\u2500 click-8.1.7.dist-info\n      \u251c\u2500\u2500 colorama\n      \u251c\u2500\u2500 colorama-0.4.6.dist-info\n      \u251c\u2500\u2500 coloredlogs\n      \u251c\u2500\u2500 coloredlogs.pth\n      \u251c\u2500\u2500 coloredlogs-15.0.1.dist-info\n      ...\n</code></pre> <p>You can open <code>Package Storage/AutoSetSyntax/</code> directory by running the following Python code in Sublime Text's console:</p> <pre><code>import AutoSetSyntax; (d := AutoSetSyntax.plugin.constants.PLUGIN_STORAGE_DIR).mkdir(parents=True, exist_ok=True); window.run_command(\"open_dir\", {\"dir\": str(d)})\n</code></pre> </li> <li> <p>Enable the feature.</p> <p>Set <code>\"magika.enabled\"</code> to <code>true</code> in AutoSetSyntax's settings.</p> </li> </ol> <p>After finishing all steps above, it should just work without restarting Sublime Text. You may go here to copy some Rust codes and paste them into Sublime Text to test whether this feature works.</p>"},{"location":"experimental/dl-based-syntax-detection/#demo","title":"Demo","text":"<p>Your browser does not support the video element.</p>"}]}