from _typeshed import Incomplete
from pathlib import Path
from typing import Any, Dict, Iterable, List, Optional

CONTENT_TYPES_CONFIG_PATH: Incomplete

class ContentType:
    UNKNOWN: str
    UNKNOWN_MIME_TYPE: str
    UNKNOWN_CONTENT_TYPE_GROUP: str
    UNKNOWN_MAGIC: str
    UNKNOWN_DESCRIPTION: str
    UNSUPPORTED: str
    ERROR: str
    MISSING: str
    EMPTY: str
    CORRUPTED: str
    TIMEOUT: str
    NOT_VALID: str
    FILE_DOES_NOT_EXIST: str
    PERMISSION_ERROR: str
    DIRECTORY: str
    SYMLINK: str
    GENERIC_TEXT: str
    name: Incomplete
    extensions: Incomplete
    mime_type: Incomplete
    group: Incomplete
    magic: Incomplete
    description: Incomplete
    vt_type: Incomplete
    datasets: Incomplete
    parent: Incomplete
    tags: Incomplete
    model_target_label: Incomplete
    target_label: Incomplete
    correct_labels: Incomplete
    in_scope_for_output_content_type: Incomplete
    def __init__(self, name: str, extensions: List[str], mime_type: Optional[str], group: Optional[str], magic: Optional[str], description: Optional[str], vt_type: Optional[str], datasets: List[str], parent: Optional[str], tags: List[str], model_target_label: Optional[str], target_label: Optional[str], correct_labels: List[str], in_scope_for_output_content_type: bool, add_automatic_tags: bool = True) -> None: ...
    @property
    def is_text(self) -> bool: ...
    @property
    def in_scope_for_training(self) -> bool: ...
    def to_dict(self) -> Dict[str, Any]: ...
    @staticmethod
    def from_dict(info_d: Dict, add_automatic_tags: bool = True) -> ContentType: ...

class ContentTypesManager:
    SPECIAL_CONTENT_TYPES: List[str]
    SUPPORTED_TARGET_LABELS_SPEC: Incomplete
    cts: Incomplete
    tag2cts: Incomplete
    ext2cts: Incomplete
    def __init__(self, content_type_config_path: Path = ..., add_automatic_tags: bool = True) -> None: ...
    def load_content_types_info(self, content_type_config_path: Path, add_automatic_tags: bool = True) -> None: ...
    def get(self, content_type_name: str) -> Optional[ContentType]: ...
    def get_or_raise(self, content_type_name: Optional[str]) -> ContentType: ...
    def get_mime_type(self, content_type_name: str, default: str = ...) -> str: ...
    def get_group(self, content_type_name: str, default: str = ...) -> str: ...
    def get_magic(self, content_type_name: str, default: str = ..., fallback_to_label: bool = True) -> str: ...
    def get_description(self, content_type_name: str, default: str = ..., fallback_to_label: bool = True) -> str: ...
    def get_cts_by_ext(self, ext: str) -> List[ContentType]: ...
    def get_cts_by_ext_or_raise(self, ext: str) -> List[ContentType]: ...
    def get_valid_tags(self, only_explicit: bool = True) -> List[str]: ...
    def is_valid_ct_label(self, label: str) -> bool: ...
    def is_valid_tag(self, tag: str) -> bool: ...
    def select(self, query: Optional[str] = None, must_be_in_scope_for_training: bool = True) -> List[ContentType]: ...
    def select_names(self, query: Optional[str] = None, must_be_in_scope_for_training: bool = True) -> List[str]: ...
    def get_content_types_space(self) -> List[str]: ...
    def get_output_content_types(self) -> List[ContentType]: ...
    def get_output_content_types_names(self) -> List[str]: ...
    def get_invalid_labels(self, labels: Iterable[str]) -> List[str]: ...
